<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
Xb2jsIiVDvV3oFc3hbnZZdHwXMhKDUoq6yAvLpwYtrCwKdYjlq/XL2JUN4jlbaN9mYQQogIoACrB
3QLwi5weorysAIU5mSiqacfpFWa3GDaQFBGLwdlNx5Rfp7ehDCnZDa7f8U8IIeQtKAAq4b0KgOD4
6FDsIFfvIZ/bznBikffXX53jo1dvFRBCCPltUABUwvsWAEIIIR8WFACVQAEghBDiChQAlUABIIQQ
4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUAB
IIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQA
lUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDi
ChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEg
hBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACV
QAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIK
FACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCE
EOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVA
ASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goU
AJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ
4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUAB
IIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQA
lUABIIQQ4goUAJVAASCEEOIKFACVQAEghBDiChQAlUABIIQQ4goUAJVAASCEEOIKFACVcJ0CQAgh
RP3ImkABUAHXJQDyjywlQLZjGIZh1Ju9vT1YrVbH2f/noQB4ONclAPLy/5n4ozIMwzDqzlWKv4QC
4OFclwAQQgghl6EAeDgUAEIIIe6AAuDhUAAIIYS4AwqAh0MBIIQQ4g4oAB4OBYAQQog7oAB4OBQA
Qggh7oAC4OFQAAghhLgDCoCHQwEghBDiDigAHg4FgBBCiDugAHg4FABCCCHugALg4VAACCGEuAMK
gIdDASCEEOIOKAAeDgWAEEKIO6AAeDgUAEIIIe6AAuDhUAAIIYS4AwqAh0MBIIQQ4g4oAB4OBYAQ
Qog7oAB4OBQAQggh7oAC4OFQAAghhLgDCoCHQwEghBDiDigAHg4FgBBCiDugAHg4FABCCCHugALg
4VAACCGEuAMKgIdDASCEEOIOKAAeDgWAEEKIO6AAeDgUAEIIIe6AAuDhUAAIIYS4AwqAh0MBIIQQ
4g4oAB4OBYAQQog7oAB4OBQAQggh7oAC4OFQAAghhLgDCoCHQwEghBDiDigAHg4FgBBCiDugAHg4
FABCCCHugALg4VAACCGEuAMKgIdDASCEEOIOKAAeDgWAEEKIO6AAeDgUAEIIIe6AAuDhUAAIIYS4
AwqAh0MBIIQQ4g4oAB4OBYAQQog7oAB4OBQAQggh7oAC4OFQAAghhLgDCoCHQwEghBDiDigAHg4F
gBBCiDugAHg4FABCCCHugALg4VAACCGEuAMKgIdDASCEEOIOKAAeDgWAEEKIO6AAeDgUAEIIIe6A
AuDhUAAIIYS4AwqAh0MBIIQQ4g4oAB4OBYAQQog7oAB4OBQAQggh7oAC4OFQAAghhLgDCoCHQwEg
hBDiDigAHg4FgBBCiDugAHg4FABCCCHugALg4VAACCGEuAMKgIdDASCEEOIOKAAeDgWAEEKIO6AA
eDgUAEIIIe6AAuDhUAAIIYS4AwqAh0MBIIQQ4g4oAB4OBYAQQog7oAB4OBQAQggh7oAC4OFQAAgh
hLgDCoCHQwEghBDiDigAHg4FgBBCiDugAHg4FABCCCHugALg4VAACCGEuAMKgIdDASCEEOIOKAAe
DgWAEEKIO6AAeDgUAEIIIe6AAuDhuCIA8g9JCCGEXIW9vT0KgCdzVQEwmUzY3t52+hjDMAzDvJnN
zU0KgCdzVQGQMYg/pDQ6hmEYhvm1yOJ/dGR6q5ZQADyEqwqANDiDwYCdnV2GYRjmlmd3d+9Xs7O7
C6PRKOrH6/WEAuAhuPIWwPj4FJaWV7C8ssYwDMPc4iwurWBhYQkLiz+fWf08pmf0MJvNr9UTCoCH
cFUBMAiLmxd/bEIIIeT09FS5OVx2Dn8u8nH93AJOTk5eqycUAA/BFQGYm190/OkJIYTcZuTbwvKj
4fJ9/p+LfJwC4MFQAAghhLjKmwIg7xGT7/dTAD4gKACEEEJc5bIAyEv98mPi8mN/F98ZQwH4AKAA
EEIIcZULAZC9fvmRv46ODjQ3N2Nra+ulBFAAPBwKACGEEFeRAnDR0+/s7MTQ0BDGx8fR2tqKnZ0d
5S0BCoCHQwEghBDiKhcCIHv8o6OjypUAeee/lIDV1VVlnALg4VAACCGEuMrlewBksZc9/ovhiysD
FAAPhwJACCHEVS4LwM+FAuDhUAAIIYS4CgVABVAACCGEuAoFQAVQAAghhLgKBUAFUAAIIYS4CgVA
BVAACCGEuAoFQAVQAAghhLgKBUAFUAAIIYS4CgVABVAACCGEuAoFQAVQAAghhLgKBUAFUAAIIYS4
CgVABVAACCGEuAoFQAVQAAghhLgKBUAFUAAIIYS4CgVABVAACCGEuAoFQAVQAAghhLgKBUAFUAAI
IYS4CgVABVAACCGEuAoFQAVQAAghhLgKBUAFUAAIIYS4CgVABVAACCGEuAoFQAVQAAghhLgKBUAF
UAAIIYS4CgVABVAACCGEuAoFQAVQAAghhLgKBUAFUAAIIYS4CgVABVAACCGEuAoFQAVQAAghhLgK
BUAFUAAIIYS4CgVABVAACCGEuAoFQAVQAAghhLgKBUAFUAAIIYS4ymUBMIr6YDAYXg5TAD4QKACE
EEJcRQqALPJbW1sYGxtTCr/JZMLk5CTW1taUcQqAh0MBIIQQ4ioXAiCLvEajwcjICKamptDS0oLt
7W3ligAFwMOhABBCCHGVi7cAZE9/d3dXkYDm5mZsbGzg8PCQbwF8CFAACCGEuMrlewBkwZdvBayv
r78s/hSADwAKACGEEFe5LAAy8krA5RsAKQAfAK4IwPzCkuNPTwgh5DZjMZuV9/kvCr+zyMfn5ikA
HstVBcB4eIjxiWns7e0Lq5NmxzAMw9zWbG3vYH19A+sbmz+blZU1TE3Nwixk4XI9oQB4CFcVAHm5
Z038sRcXl7G0tMIwDMPc5iyvYnlFRP7/M1lcWsa2EIWTk9frCwXAQ7iqAMhIi7NYROT/DMMwDPNL
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Toogle-LicenseStatus
{
	if ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = 'Please connect to Office 365 in the General tab to add your user to Groups.
      # If no license is selected for your user, this will remain disabled'
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = 'Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.

      # If no license is selected for your user, this will remain disabled'
		if (($comboboxO365countrycode.SelectedItem -eq $null) -and ($Licenses2Add.Count -ge 1))
		{
			if ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = '*Country Code'
				$labelCountryCode.ForeColor = 'LightCoral'
			}
			else
			{
				$labelCountryCode.Text = '*Country Code'
				$labelCountryCode.ForeColor = 'Firebrick'
			}
			
			$CountryCode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode)
			
			if ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = 'US'
			}
			else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		else
		{
			if ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = 'Country Code'
				$labelCountryCode.ForeColor = 'White'
			}
			else
			{
				$labelCountryCode.Text = 'Country Code'
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = 'Please select any Mail Enabled groups to add your user to'
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = 'Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select'
		
		if (($comboboxO365countrycode.SelectedItem -eq $null) -and ($Licenses2Add.Count -ge 1))
		{
			if ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = '*Country Code'
				$labelCountryCode.ForeColor = 'LightCoral'
			}
			else
			{
				$labelCountryCode.Text = '*Country Code'
				$labelCountryCode.ForeColor = 'Firebrick'
			}
			$CountryCode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode)
			
			if ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = 'US'
			}
			else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		else
		{
			if ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = 'Country Code'
				$labelCountryCode.ForeColor = 'White'
			}
			else
			{
				$labelCountryCode.Text = 'Country Code'
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}

function Update-ListBox
{
   <#
         .SYNOPSIS
         This functions helps you load items into a ListBox or CheckedListBox.
	
         .DESCRIPTION
         Use this function to dynamically load items into the ListBox control.
	
         .PARAMETER ListBox
         The ListBox control you want to add items to.
	
         .PARAMETER Items
         The object or objects you wish to load into the ListBox's Items collection.
	
         .PARAMETER DisplayMember
         Indicates the property to display for the items in this control.
	
         .PARAMETER Append
         Adds the item(s) to the ListBox without clearing the Items collection.
	
         .EXAMPLE
         Update-ListBox $ListBox1 "Red", "White", "Blue"
	
         .EXAMPLE
         Update-ListBox $listBox1 "Red" -Append
         Update-ListBox $listBox1 "White" -Append
         Update-ListBox $listBox1 "Blue" -Append
	
         .EXAMPLE
         Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
         .NOTES
         Additional information about the function.
   #>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	$null = (Add-Type -AssemblyName System.Windows.Forms)
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [Windows.Forms.ListBox+ObjectCollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ListBox.BeginUpdate()
		
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	$ListBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
   <#
         .SYNOPSIS
         This functions helps you load items into a ComboBox.
	
         .DESCRIPTION
         Use this function to dynamically load items into the ComboBox control.
	
         .PARAMETER ComboBox
         The ComboBox control you want to add items to.
	
         .PARAMETER Items
         The object or objects you wish to load into the ComboBox's Items collection.
	
         .PARAMETER DisplayMember
         Indicates the property to display for the items in this control.
	
         .PARAMETER Append
         Adds the item(s) to the ComboBox without clearing the Items collection.
	
         .EXAMPLE
         Update-ComboBox $combobox1 "Red", "White", "Blue"
	
         .EXAMPLE
         Update-ComboBox $combobox1 "Red" -Append
         Update-ComboBox $combobox1 "White" -Append
         Update-ComboBox $combobox1 "Blue" -Append
	
         .EXAMPLE
         Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
         .NOTES
         Additional information about the function.
   #>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	[CmdletBinding()]
	param
	(
		
		[switch]
		$O365
	)
	
	$Dictionary = @(
		'Honda'
		'Staple'
		'Battery'
		'Civic'
		'Chicago'
		'Winter'
		'Cubs'
		'Bears'
		'Snow'
		'Train'
		'Shoes'
		'Blue'
		'Bike'
		'Ring'
		'Watch'
		'Computer'
		'Neck'
		'Laptop'
		'Monitor'
		'Toilet'
		'Baseball'
		'Football'
		'Soccer'
		'Phone'
		'Carbondale'
		'Saluki'
		'Swim'
		'Lake'
		'Puppy'
		'Watch'
		'Royals'
		'Basketball'
		'Letter'
		'Paper'
		'Sticker'
		'Kitten'
		'Marker'
		'Highway'
		'Wire'
		'Keyboard'
		'Frisbee'
		'Disc'
		'Hawk'
		'West'
		'North'
		'East'
		'South'
		'Water'
		'Ice'
		'Dirt'
		'Taco'
		'Mouse'
		'Deer'
		'Speaker'
		'Hand'
		'Green'
		'Purple'
		'Pink'
		'Boat'
		'Toilet'
		'Sting'
		'Fish'
		'Bee'
		'White'
		'Grey'
		'Shoes'
		'Carpet'
		'Bed'
		'Pillow'
		'Sears'
		'Mustard'
		'Relish'
		'Ketchup'
		'Milk'
		'Apple'
		'Orange'
		'Flower'
		'Lotion'
		'Plane'
		'Desert'
		'Sand'
		'Beach'
		'Clouds'
		'Wagon'
		'Hair'
		'Internet'
		'Track'
		'Golf'
		'Sledding'
		'Market'
		'Window'
		'Door'
		'Deck'
		'Cards'
		'Shelf'
		'Santa'
		'Tack'
		'Building'
		'Tennis'
		'Power'
		'Sox'
		'Wrigley'
		'Tea'
		'Juice'
		'Plant'
		'Geneva'
		'City'
		'Kansas'
		'Missouri'
		'Midwest'
		'Great'
		'Box'
		'Crane'
		'Michigan'
		'Illinois'
		'Garbage'
		'Cougars'
		'Route'
		'Bridge'
		'Mountain'
		'Message'
		'Fire'
		'Taxi'
		'Bus'
		'Color'
		'Sharpie'
		'Ball'
		'Square'
		'River'
		'Navy'
		'Pier'
		'Grant'
		'Park'
		'Lincoln'
		'President'
		'Wrigley'
		'Soldier'
		'Forest'
		'Bulldog'
		'Police'
		'Taco'
		'Deep'
		'Dish'
		'Pizza'
		'Fire'
		'Ice'
		'Lion'
		'World'
		'Shoe'
		'Ant'
		'Bug'
		'Hair'
		'Beard'
		'Light'
		'Wave'
		'Field'
		'Toll'
		'Tax'
		'Money'
		'Bill'
		'Pot'
		'Pan'
	)
	
	if ($O365 -eq $true)
	{
		$word1 = (Get-Random -Maximum $Dictionary)
		$Num = (Get-Random -Maximum 99 -Minimum 0)
		$WChar = @(
			'!'
			'@'
			"$"
			'%'
			'&'
			'?'
			'#'
		)
		$Wildchar = (Get-Random -Maximum $WChar)
		$word1 + '-' + $Num + $Wildchar
	}
	else
	{
		$word1 = (Get-Random -Maximum $Dictionary)
		$word2 = (Get-Random -Maximum $Dictionary | Where-Object -FilterScript {
				$_ -ne $word1
			})
		$Word3 = (Get-Random -Maximum $Dictionary | Where-Object -FilterScript {
				($_ -ne $word1) -and ($_ -ne $word2)
			})
		$Num = Get-Random -Maximum 99 -Minimum 0
		$word1 + '-' + $word2 + '-' + $Word3 + $Num
	}
}

function Reset-Form
{
   <#
      ACTIVE DIRECTORY USER
   #>
	
	# General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ''
	$textboxInitials.Text = ''
	$textboxLastName.Text = ''
	$textboxDisplayName.Text = ''
	
	$ADDescriptionReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription)
	
	if ($ADDescriptionReset -ne 1)
	{
		$textboxDescription.Text = ''
	}
	
	$ADOfficeReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice)
	
	if ($ADOfficeReset -ne 1)
	{
		$textboxoffice.Text = ''
	}
	
	$textboxPasswordGen.Text = ''
	$maskedtextboxpassword.Text = ''
	$textboxConfirmPassword.Text = ''
	$textboxTelephone.Text = ''
	$textboxEmail.Text = ''
	$textboxWebPage.Text = ''
	
	add-logs -text 'LOG: Done'
	
	# Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ''
	$textboxSamAccount.Text = ''
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ''
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ''
	$textboxPOBox.Text = ''
	
	$ADCityReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice)
	
	if ($ADCityReset -ne 1)
	{
		$textboxcity.Text = ''
	}
	$ADStateReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState)
	
	if ($ADStateReset -ne 1)
	{
		$textboxstate.Text = ''
	}
	
	$ADZipReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADZip -ErrorAction SilentlyContinue).ADZip)
	
	if ($ADZipReset -ne 1)
	{
		$textboxzipcode.Text = ''
	}
	
	
	add-logs -text 'LOG: Done'
	
	# Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
	}
	
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	
	$textboxjobtitle.Text = ''
	
	$ADDepartmentReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment)
	
	if ($ADDepartmentReset -ne 1)
	{
		$textboxDepartment.Text = ''
	}
	
	$ADCompanyReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany)
	
	if ($ADCompanyReset -ne 1)
	{
		$textboxCompany.Text = ''
	}
	
	add-logs -text 'LOG: Done'
	
	# Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	
	$textboxprofilepath.Text = ''
	
	$ADLogonScriptReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADLogonScript -ErrorAction SilentlyContinue).ADLogonScript)
	
	if ($ADLogonScriptReset -ne 1)
	{
		$textboxlogonscript.Text = ''
	}
	
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ''
	
	add-logs -text 'LOG: Done'
	
	# Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	
	$textboxproxyaddress.Text = ''
	$textboxEmployeeID.Text = ''
	$textboxemployeenumber.Text = ''
	$textboxemployeeType.Text = ''
	
	add-logs -text 'LOG: Done'
	
   <#
      OFFICE 365 USER
   #>
	
	# General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	
	$textboxO365FirstName.Text = ''
	$textboxO365LastName.Text = ''
	$textboxO365DisplayName.Text = ''
	$textboxo365passwordgen.Text = ''
	$maskedtextboxo365password.Text = ''
	$textboxo365confirmpassword.Text = ''
	
	add-logs -text 'LOG: Done'
	
	# Account Page
	
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ''
	$textboxO365EmailAddress.Text = ''
	$textboxo365proxyaddresses.Text = ''
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = 'False'
	
	$CountryCode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode)
	
	if ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = 'US'
	}
	else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	add-logs -text 'LOG: Done'
	
	# Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	
	$textboxO365street.Text = ''
	
	$O365CityReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City)
	
	if ($O365CityReset -ne 1)
	{
		$textboxo365city.Text = ''
	}
	
	$O365StateReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State)
	
	if ($O365StateReset -ne 1)
	{
		$textboxo365state.Text = ''
	}
	
	$O365ZipReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365Zip -ErrorAction SilentlyContinue).O365Zip)
	
	if ($O365ZipReset -ne 1)
	{
		$textboxo365zip.Text = ''
	}
	
	
	add-logs -text 'LOG: Done'
	
	# Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
	}
	
	add-logs -text 'LOG: Done'
	
	# Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
	}
	
	add-logs -text 'LOG: Done'
	
	# Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
	}
	
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser)
	
	if ($copyuser -ne 1)
	{
		$config = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName)
		
		# Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		
		if (($null -eq $config) -or ($config -eq ''))
		{
			$config = '%Firstname% %LastName%'
			$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value '%FirstName% %LastName%' -Force)
		}
		
		$config -split '%' | ForEach-Object -Process {
			if ($_ -eq 'FirstName')
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			elseif ($_ -eq 'LastName')
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			elseif (($_ -eq 'Initial') -or ($_ -eq 'Initials'))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			elseif ($_ -like ' ')
			{
				$space = ' '
				$DisplayNameFormatString += $space
			}
			elseif ($_ -eq 'EmployeeID')
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			elseif ($_ -eq 'EmployeeNumber')
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			elseif ($_ -eq 'SamAccountName')
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			elseif (($_ -eq 'UPN') -or ($_ -eq 'UserPrincipalName'))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			elseif (($_ -eq 'Email') -or ($_ -eq 'E-Mail'))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			elseif ($_ -eq 'FirstLetterFirstName')
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'FirstLetterLastName')
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'SamAccountName')
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			elseif ($_ -eq 'UserPrincipalNameDomain')
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			elseif ($_ -eq 'UPNDomain')
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
		}
	}
}

function Update-EmailTextbox
{
	$copyuser = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser)
	
	if ($copyuser -ne 1)
	{
		$config = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail)
		
		# Create an array that we will use for formatting
		$EmailFormatString = @()
		
		if (($null -ne $config) -and ($config -ne ''))
		{
			$config -split '%' | ForEach-Object -Process {
				if ($_ -eq 'FirstName')
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				elseif ($_ -eq 'LastName')
				{
					$EmailFormatString += $textboxLastName.Text
				}
				elseif (($_ -eq 'Initial') -or ($_ -eq 'Initials'))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				elseif ($_ -like ' ')
				{
					$space = ' '
					$EmailFormatString += $space
				}
				elseif ($_ -eq 'EmployeeID')
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				elseif ($_ -eq 'EmployeeNumber')
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				elseif ($_ -eq 'SamAccountName')
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				elseif (($_ -eq 'UPN') -or ($_ -eq 'UserPrincipalName'))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				elseif (($_ -eq 'Email') -or ($_ -eq 'E-Mail'))
				{
					$EmailFormatString += $textboxEmail.text
				}
				elseif ($_ -eq 'FirstLetterFirstName')
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				elseif ($_ -eq 'FirstLetterLastName')
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				elseif ($_ -eq 'SamAccountName')
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				elseif ($_ -eq 'UserPrincipalNameDomain')
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				elseif ($_ -eq 'UPNDomain')
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				else
				{
					$EmailFormatString += $_
				}
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser)
	
	if ($copyuser -ne 1)
	{
		$config = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName)
		
		# Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		
		if (($null -ne $config) -and ($config -ne ''))
		{
			$config -split '%' | ForEach-Object -Process {
				if ($_ -eq 'FirstName')
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				elseif ($_ -eq 'LastName')
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				elseif (($_ -eq 'Initial') -or ($_ -eq 'Initials'))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				elseif ($_ -like ' ')
				{
					$space = ' '
					$SamAccountNameFormatString += $space
				}
				elseif ($_ -eq 'EmployeeID')
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				elseif ($_ -eq 'EmployeeNumber')
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				elseif ($_ -eq 'SamAccountName')
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				elseif (($_ -eq 'UPN') -or ($_ -eq 'UserPrincipalName'))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				elseif (($_ -eq 'Email') -or ($_ -eq 'E-Mail'))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				elseif ($_ -eq 'FirstLetterFirstName')
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				elseif ($_ -eq 'FirstLetterLastName')
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				elseif ($_ -eq 'SamAccountName')
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				else
				{
					$SamAccountNameFormatString += $_
				}
			}
			
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser)
	
	if ($copyuser -ne 1)
	{
		$config = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName)
		
		# Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		
		if (($null -ne $config) -and ($config -ne ''))
		{
			$config -split '%' | ForEach-Object -Process {
				if ($_ -eq 'FirstName')
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				elseif ($_ -eq 'LastName')
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				elseif (($_ -eq 'Initial') -or ($_ -eq 'Initials'))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				elseif ($_ -like ' ')
				{
					$space = ' '
					$UserPrincipalNameFormatString += $space
				}
				elseif ($_ -eq 'EmployeeID')
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				elseif ($_ -eq 'EmployeeNumber')
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				elseif ($_ -eq 'SamAccountName')
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				elseif (($_ -eq 'UPN') -or ($_ -eq 'UserPrincipalName'))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				elseif (($_ -eq 'Email') -or ($_ -eq 'E-Mail'))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				elseif ($_ -eq 'FirstLetterFirstName')
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				elseif ($_ -eq 'FirstLetterLastName')
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				elseif ($_ -eq 'SamAccountName')
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				elseif ($_ -eq 'UserPrincipalNameDomain')
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				elseif ($_ -eq 'UPNDomain')
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				else
				{
					$UserPrincipalNameFormatString += $_
				}
			}
			
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = '44,44,44'
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = '44,44,44'
	$MainForm.ForeColor = 'White'
	$labelLogFile.BackColor = '44,44,44'
	$labelLogFile.ForeColor = 'White'
	$labelconnectionstatus.ForeColor = 'LightCoral'
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = '44,44,44'
	$groupboxStatus.ForeColor = 'White'
	$tabpageSettings.BackColor = '44,44,44'
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	$menustrip1.BackColor = '44,44,44'
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object -Process {
				if ($_ -is [Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = '44,44,44'
					$_.ForeColor = 'White'
				}
			}
		}
	}
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = '44,44,44'
			$_.ForeColor = 'White'
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = '44,44,44'
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = '44,44,44'
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradleyWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	$console.BackColor = '35,35,35'
	$console.ForeColor = 'White'
	$buttonExit.ForeColor = 'white'
	$buttonExit.BackColor = '35,35,35'
	$buttonCreateUser.ForeColor = 'white'
	$buttonCreateUser.BackColor = '35,35,35'
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = '44,44,44'
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = '44,44,44'
	
	$tabcontrolUserProperties.TabPages | ForEach-Object -Process {
		$_.ForeColor = 'White'
		$_.BackColor = '44,44,44'
	}
	
	$tabcontrol1.TabPages | ForEach-Object -Process {
		$_.ForeColor = 'White'
		$_.BackColor = '44,44,44'
	}
	
	# GENERAL PAGE
	$groupboxADSync.ForeColor = 'White'
	$panel1.BackColor = '35,35,35'
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'
	
	$tabpageGeneral.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	# ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = '35,35,35'
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = '35,35,35'
	$panel2.ForeColor = 'White'
	$panel2.BackColor = '35,35,35'
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = '35,35,35'
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = '35,35,35'
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = '44,44,44'
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	# ADDRESS PAGE
	$tabpageAddress.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	# GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = '35,35,35'
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = '44,44,44'
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = '35,35,35'
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = '35,35,35'
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	# ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	# PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = '35,35,35'
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = '35,35,35'
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = '35,35,35'
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = '35,35,35'
	
	# ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	# OFFICE 365
	$tabcontrolO365.BackColor = '44,44,44'
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	
	# GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$tabpageO365General.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Button])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = '44,44,44'
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = '35,35,35'
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = '35,35,35'
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = '35,35,35'
	
	$panel3.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Button])
		{
			$_.BackColor = '44,44,44'
			$_.ForeColor = 'White'
		}
	}
	
	$panel3.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$textboxo365passwordgen.BackColor = '44,44,44'
	
	if ($buttonConnectToOffice365.Text -eq '*Connect to Office 365')
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	# ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = '44,44,44'
	
	$tabpageO365Account.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$tabpageO365Account.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = '35,35,35'
	
	# ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$tabpageO365Address.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Label])
		{
			$_.ForeColor = 'White'
		}
	}
	
	$tabpageO365Address.BackColor = '44,44,44'
	$tabpageO365Address.ForeColor = 'White'
	
	# MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = '44,44,44'
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = '44,44,44'
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = '35,35,35'
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = '35,35,35'
	
	# SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = '44,44,44'
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = '35,35,35'
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = '44,44,44'
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = '35,35,35'
	$tabpagesecurityGroups.BackColor = '44,44,44'
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = '44,44,44'
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = '44,44,44'
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = '44,44,44'
	
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Label])
		{
			$_.BackColor = '44,44,44'
			$_.ForeColor = 'White'
		}
	}
	
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = '35,35,35'
	
	# ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = 'White'
	$tabpageO365Attributes.BackColor = '44,44,44'
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = '35,35,35'
	$comboboxOWA.FlatStyle = 'Flat'
	$comboboxOWA.ForeColor = 'White'
	$comboboxOWA.BackColor = '35,35,35'
	$comboboxActiveSync.FlatStyle = 'Flat'
	$comboboxActiveSync.ForeColor = 'White'
	$comboboxActiveSync.BackColor = '35,35,35'
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = 'WhiteSmoke'
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = 'WhiteSmoke'
	$MainForm.ForeColor = 'Black'
	$labelLogFile.BackColor = 'White'
	$labelLogFile.ForeColor = 'Black'
	$labelconnectionstatus.ForeColor = 'FireBrick'
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = 'White'
	$groupboxStatus.ForeColor = 'Black'
	$tabpageSettings.BackColor = 'White'
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	$menustrip1.BackColor = 'White'
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object -Process {
				if ($_ -is [Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = 'White'
					$_.ForeColor = 'Black'
				}
			}
		}
	}
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = 'White'
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = 'White'
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradleyWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	$console.BackColor = 'White'
	$console.ForeColor = 'Black'
	$buttonExit.ForeColor = 'Black'
	$buttonExit.BackColor = 'White'
	$buttonCreateUser.ForeColor = 'Black'
	$buttonCreateUser.BackColor = 'White'
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = 'White'
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = 'White'
	
	$tabcontrolUserProperties.TabPages | ForEach-Object -Process {
		$_.ForeColor = 'Black'
		$_.BackColor = 'White'
	}
	
	$tabcontrol1.TabPages | ForEach-Object -Process {
		$_.ForeColor = 'Black'
		$_.BackColor = 'White'
	}
	
	# GENERAL PAGE
	$panel1.BackColor = 'MenuBar'
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	# ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = 'Window'
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = 'Window'
	$panel2.ForeColor = 'Black'
	$panel2.BackColor = 'MenuBar'
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = 'White'
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = 'White'
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = 'White'
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	# ADDRESS PAGE
	$tabpageAddress.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	# GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = 'White'
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = 'White'
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = 'White'
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = 'Window'
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	# ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	# PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = 'Window'
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = 'White'
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = 'White'
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = 'White'
	
	# ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	# OFFICE 365
	$tabcontrolO365.BackColor = 'White'
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	
	# GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$tabpageO365General.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Button])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = 'White'
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = 'White'
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = 'Window'
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = 'MenuBar'
	
	$panel3.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Button])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$panel3.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$textboxo365passwordgen.BackColor = 'White'
	
	if ($buttonConnectToOffice365.Text -eq '*Connect to Office 365')
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	# ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = 'White'
	
	$tabpageO365Account.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$tabpageO365Account.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = 'Window'
			$_.ForeColor = 'Black'
		}
	}
	
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = 'MenuBar'
	
	# ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$tabpageO365Address.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Label])
		{
			$_.ForeColor = 'Black'
		}
	}
	
	$tabpageO365Address.BackColor = 'White'
	$tabpageO365Address.ForeColor = 'Black'
	
	# MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = 'White'
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = 'White'
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = 'White'
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = 'White'
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = 'White'
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = 'White'
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = 'White'
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = 'White'
	$tabpagesecurityGroups.BackColor = 'White'
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	# SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = 'White'
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = 'White'
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = 'White'
	
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Label])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = 'Window'
			$_.ForeColor = 'Black'
		}
	}
	
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = 'White'
	
	
	# ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = 'Black'
	$tabpageO365Attributes.BackColor = 'White'
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = 'Window'
	$comboboxOWA.FlatStyle = 'Standard'
	$comboboxOWA.ForeColor = 'Black'
	$comboboxOWA.BackColor = 'Window'
	$comboboxActiveSync.FlatStyle = 'Standard'
	$comboboxActiveSync.ForeColor = 'Black'
	$comboboxActiveSync.BackColor = 'Window'
}

function Copy-ADUserAttributes
{
	Add-Logs -text 'LOG: Setting Description'
	
	$textboxDescription.Text = $UserTemplate.Description
	
	Add-Logs -text 'LOG: Setting Office'
	
	$textboxoffice.Text = $UserTemplate.Office
	
	Add-Logs -text 'LOG: Setting Office Phone'
	
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	
	Add-Logs -text 'LOG: Setting Email Address'
	
	$textboxEmail.Text = $UserTemplate.EmailAddress
	
	Add-Logs -text 'LOG: Setting Home Page'
	
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	Add-Logs -text "LOG: Changing the OU for the user to $((($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)")))"
	
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	Add-Logs -text 'LOG: Checking Password Never Expires status'
	
	if ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		Add-Logs -text 'LOG: Setting Password Never Expires to True'
		
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	else
	{
		Add-Logs -text 'LOG: Setting Password Never Expires to False'
		
		$checkboxPasswordNeverExpires.CheckState = 'UnChecked'
	}
	
	Add-Logs -text 'LOG: Checking Password Change Ability'
	
	if ($UserTemplate.CannotChangePassword -eq $true)
	{
		Add-Logs -text 'LOG: Setting User Cannot Change Password to True'
		
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	else
	{
		Add-Logs -text 'LOG: Setting User Cannot Change Password to False'
		
		$checkboxUserCannotChangePass.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text 'LOG: Checking Password Change statue'
	
	if ($UserTemplate.PasswordExpired -eq $true)
	{
		Add-Logs -text 'LOG: Setting User Must Change Password to True'
		
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	else
	{
		Add-Logs -text 'LOG: Setting User Must Change Password to False'
		
		$checkboxUserMustChangePasswo.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text 'LOG: Setting Street Address'
	
	$textboxStreet.Text = $UserTemplate.StreetAddress
	
	Add-Logs -text 'LOG: Setting PO Box'
	
	$textboxPOBox.Text = $UserTemplate.POBox
	
	Add-Logs -text 'LOG: Setting City'
	
	$textboxcity.Text = $UserTemplate.City
	
	Add-Logs -text 'LOG: Setting State'
	
	$textboxstate.Text = $UserTemplate.State
	
	Add-Logs -text 'LOG: Setting Postal Code'
	
	$textboxzipcode.Text = $UserTemplate.PostalCode
	
	Add-Logs -text 'LOG: Checking Group Memberships'
	$checkedlistboxGroups.CheckedItems = $null
	
	$CacheGroups = "$env:TEMP\MUCCacheGroups.txt"
	$click = 1
	
	($UserTemplate).MemberOf | ForEach-Object -Process {
		$GName = ((Get-ADGroup -Identity $_).name)
		
		Add-Logs -text "LOG: Adding User to the Group: $GName"
		
		$null = ($GName | Out-File -FilePath $CacheGroups -Append -Force -ErrorAction SilentlyContinue)
		
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	
	$click = 0
	
	Add-Logs -text 'LOG: Setting Job Title'
	
	$textboxjobtitle.text = $UserTemplate.Title
	
	Add-Logs -text 'LOG: Setting Department'
	
	$textboxDepartment.Text = $UserTemplate.Department
	
	Add-Logs -text 'LOG: Setting Company'
	
	$textboxCompany.Text = $UserTemplate.Company
	
	Add-Logs -text 'LOG: Setting Profile Path'
	
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	
	Add-Logs -text 'LOG: Setting Script Path'
	
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	
	Add-Logs -text 'LOG: Setting Home Drive'
	
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	
	Add-Logs -text 'LOG: Setting Home Directory'
	
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	
	Add-Logs -text 'LOG: Setting Employee Type'
	
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	Add-Logs -text 'LOG: Done'
}

function Copy-O365UserAttributes
{
	$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force)
	
	if ($Licenses2Add.count -gt 0)
	{
		$Global:Licenses2Add = (New-Object -TypeName 'System.Collections.Generic.List[System.Object]')
	}
	
	$copyuser = $CopyFromO365User_comboboxcopyuser
	
	add-logs -text "LOG: Copying attributes from $copyuser"
	
	$UserObj = (Get-MsolUser -All | Where-Object -FilterScript {
			$_.DisplayName -eq $copyuser
		}) | Select-Object -First 1
	
	add-logs -text "LOG: Getting the UPN Domain of $copyuser"
	
	$UPNDomain = ($UserObj.userprincipalname).split('@') | Select-Object -Last 1
	
	add-logs -text "LOG: Setting the UPN Domain to $UPNDomain"
	
	$comboboxO365Domains.SelectedItem = '@' + $UPNDomain
	
	add-logs -text 'LOG: Copying Country Code'
	
	$comboboxO365countrycode.SelectedText = ($UserObj).CountryCode
	
	add-logs -text "LOG: Checking MFA status of $copyuser"
	
	if ($null -eq $UserObj.StrongAuthenticationRequirements.State)
	{
		add-logs -text 'LOG: Setting MFA to False'
		
		$comboboxMFA.SelectedItem = 'False'
	}
	else
	{
		add-logs -text 'LOG: Setting MFA to True'
		
		$comboboxMFA.SelectedItem = 'True'
	}
	
	add-logs -text 'LOG: Copying City'
	
	$textboxo365city.Text = ($UserObj).city
	
	add-logs -text 'LOG: Copying State'
	
	$textboxo365state.Text = ($UserObj).state
	
	add-logs -text 'LOG: Copying Street Address'
	
	$textboxO365street.Text = ($UserObj).streetaddress
	
	add-logs -text 'LOG: Copying Postal Code'
	
	$textboxo365zip.Text = ($UserObj).postalcode
	
	if (($UserObj).PasswordNeverExpires -eq $true)
	{
		add-logs -text 'LOG: Copying Password Never Expires Flag'
		
		$checkboxO365PasswordNeverExpires.CheckState = 'Checked'
	}
	
	if (($UserObj).BlockCredential -eq $true)
	{
		add-logs -text 'LOG: Copying Disabled Account State'
		
		$checkboxBlockCred.CheckState = 'Checked'
	}
	
	add-logs -text "LOG: Getting all licenses assinged to $copyuser"
	
	$currentlicenses = ($UserObj).Licenses.accountskuid
	
	foreach ($currentlicense in $currentlicenses)
	{
		$TenantSku = (Get-MsolAccountSku | Where-Object -FilterScript {
				$_.AccountSkuID -match $currentlicense
			})
		
		if ($TenantSku.ActiveUnits -ne $TenantSku.ConsumedUnits)
		{
			$lic = ($currentlicense -split ':' | Select-Object -Last 1)
			
			# lookup skus in hashtable and convert to friendly name
			$FriendlyName = $Sku.Item("$lic")
			
			if ($null -eq $FriendlyName)
			{
				add-logs -text "LOG: Copying The License: $_"
				
				$obj = [PSCustomObject]@{
					'Name' = $lic
				}
				
				$Licenses2Add.Add($obj)
			}
			else
			{
				add-logs -text "LOG: Copying The License: $FriendlyName"
				
				$obj = [PSCustomObject]@{
					'Name' = $FriendlyName
				}
				
				$Licenses2Add.Add($obj)
			}
		}
	}
	
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	$null = (Toogle-LicenseStatus)
	
	add-logs -text "LOG: Checking Mail Group Membership for $copyuser"
	
	Get-MsolGroup -All | Where-Object -FilterScript {
		($_.GroupType -eq 'DistributionList') -or ($_.GroupType -eq 'MailEnabledSecurity')
	} | ForEach-Object -Process {
		if (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object -FilterScript {
				$_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim('SMTP:')
			})
		{
			if ($checkedlistboxDISTROo365groups.Items -contains $_.DisplayName)
			{
				$null = ($_.DisplayName | Out-File -FilePath $CacheDistroGroupsFile -Append -Force -ErrorAction SilentlyContinue)
				
				add-logs -text "LOG: Adding User to the Distribution Group: $($_.DisplayName)"
				
				$checkedlistboxDISTROo365groups.SelectedItem = $($_.DisplayName)
				$index = $checkedlistboxDISTROo365groups.SelectedIndex
				$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
			}
		}
	}
	
	Add-Logs -text "LOG: Getting all Security Groups $copyuser is a Member of"
	
	Get-MsolGroup -All | Where-Object -FilterScript {
		$_.GroupType -eq 'Security'
	} | ForEach-Object -Process {
		if (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object -FilterScript {
				$_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim('SMTP:')
			})
		{
			if ($checkedlistboxO365SecurityGroups.Items -contains $_.DisplayName)
			{
				$null = ($_.DisplayName | Out-File -FilePath $CacheSecurityGroupsFile -Append -Force -ErrorAction SilentlyContinue)
				
				add-logs -text "LOG: Adding User to the Security Group: $($_.DisplayName)"
				
				$checkedlistboxO365SecurityGroups.SelectedItem = $($_.DisplayName)
				$index = $checkedlistboxO365SecurityGroups.SelectedIndex
				$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
			}
		}
	}
	
	
	
	$UserObjMailbox = (Get-Mailbox (($UserObj.ProxyAddresses -cmatch 'SMTP:').trim('SMTP:')))
	
	Add-Logs -text 'LOG: Gettings GAL status for User'
	
	if ($UserObjMailbox.HiddenFromAddressListsEnabled -eq $true)
	{
		Add-Logs -text 'LOG: Hiding User from GAL: True'
		
		$comboboxO365HidefromGAL.SelectedItem = 'True'
	}
	else
	{
		Add-Logs -text 'LOG: Hiding User from GAL: False'
		
		$comboboxO365HidefromGAL.SelectedItem = 'False'
	}
	
	Add-Logs -text 'LOG: Getting Outlook on the Web (OWA) Status for user'
	
	if (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).OWAEnabled) -eq $true)
	{
		Add-Logs -text 'LOG: Outlook on the Web (OWA): True'
		
		$comboboxOWA.SelectedItem = 'True'
	}
	else
	{
		Add-Logs -text 'LOG: Outlook on the Web (OWA): False'
		
		$comboboxOWA.SelectedItem = 'False'
	}
	
	Add-Logs -text 'LOG: Getting ActiveSync Status for user'
	
	if (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).ActiveSync) -eq $true)
	{
		Add-Logs -text 'LOG: ActiveSync: True'
		
		$comboboxActiveSync.SelectedItem = 'True'
	}
	else
	{
		Add-Logs -text 'LOG: ActiveSync: False'
		
		$comboboxActiveSync.SelectedItem = 'False'
	}
	
	add-logs -text 'LOG: Done'
	
	$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force)
}

function License-MUCO365User
{
	$licenseforuser = @()
	
	Add-Logs -text 'LOG: Getting License selected for user'
	
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text 'LOG: Getting AccountSKU Domain'
	
	$LicenseDomain = (((((Get-MsolAccountSku).AccountSkuID) -split ':' | Select-Object -First 1) + ':').Trim())
	
	foreach ($License in $Licenses)
	{
		Add-Logs -text 'LOG: Looking up SKU for license'
		
		$Lookup = $Sku.keys | Where-Object -FilterScript {
			$Sku["$_"] -eq "$License"
		}
		
		Add-Logs "LOG: License lookup is $Lookup"
		
		if ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text 'LOG: No SKU found during lookup'
			
			$BackSKU = "$LicenseDomain$License"
			
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			
			$CheckSku = Get-MsolAccountSku | Where-Object -FilterScript {
				$_.AccountSKuID -like "*$BackSKU*"
			} | Select-Object -ExpandProperty AccountSkuID
			
			if ($CheckSku -ne $null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				
				$licenseforuser += $CheckSku
			}
			else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		else
		{
			Add-Logs -text 'LOG: Found the SKU for the license'
			
			$Lookup | ForEach-Object -Process {
				Add-Logs -text "LOG: Checking License $_"
				
				$BackSKU = "$LicenseDomain$_"
				
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				
				$CheckSku = Get-MsolAccountSku | Where-Object -FilterScript {
					$_.AccountSKuID -like "*$BackSKU*"
				} | Select-Object -ExpandProperty AccountSkuID
				
				if ($CheckSku -ne $null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		
		$licenseforuser | Out-File -FilePath "$env:TEMP\MUClicenseforuser.txt" -Force
	}
}

function New-MUCUser
{
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	
	# Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	
	# If account should be disabled
	if ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		
		try
		{
			$null = (New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text)
		}
		catch
		{
			add-logs -text "WARN: $_"
			
			$InfoMessage = $_
			$InfoTitle = 'Warning'
			$null = (Show-MessageBox_psf)
		}
		
		$User = (Get-ADUser -Filter * -Properties * | Where-Object -FilterScript {
				($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)))
			})
		
		add-logs -text 'LOG: User has been created'
		
		# Check if Account is set to expire at a specific time
		Add-Logs -text 'LOG: Checking if User account expiration is set'
		
		if ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text 'LOG: User account expiration is set'
			
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + ' ' + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			
			Add-Logs -text 'LOG: Done'
		}
		else
		{
			Add-Logs -text 'LOG: User account expiration not set'
		}
		
		$Proxys = @()
		
		add-logs -text 'LOG: Getting user proxy addresses to set'
		
		$Proxys += $textboxproxyaddress.Lines
		
		if ($Proxys -ne $null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text 'LOG: Adding proxy addresses'
				add-logs -text 'LOG: Getting user proxy addresses to set'
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				
				Set-ADUser -Identity $User -Add @{
					proxyAddresses = $Proxy
				}
			}
		}
		else
		{
			add-logs -text 'LOG: No proxys were found to add'
		}
		
		add-logs -text 'LOG: Done with Proxys'
		add-logs -text 'LOG: Getting user employeeType attribute to set'
		
		if ($textboxemployeeType.text -ne '')
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			
			$null = (Set-ADUser -Identity $User -Add @{
					EmployeeType = $textboxemployeeType.text
				})
		}
		else
		{
			add-logs -text 'LOG: No employeeType to add'
		}
		
		add-logs -text 'LOG: Done with employeeType'
		add-logs -text 'LOG: Getting user employeeNumber attribute to set'
		
		if ($textboxemployeenumber.text -ne '')
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			$null = (Set-ADUser -Identity $User -EmployeeNumber $textboxemployeenumber.text)
		}
		else
		{
			add-logs -text 'LOG: No employeeNumber to add'
		}
		
		add-logs -text 'LOG: Done with employeeNumber'
		add-logs -text 'LOG: Getting user employeeID attribute to set'
		
		if ($textboxEmployeeID.Text -ne '')
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			$null = (Set-ADUser -Identity $User -EmployeeID $textboxEmployeeID.text)
		}
		else
		{
			add-logs -text 'LOG: No employeeID to add'
		}
		
		add-logs -text 'LOG: Done with employeeID'
		
		# Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		
		$groups = $checkedlistboxGroups.CheckedItems
		
		if ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $group -Members $User"
				Add-ADGroupMember -Identity $group -Members $User
			}
		}
		else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		
		Add-Logs -text 'LOG: Done'
		Add-Logs -text 'LOG: Checking if primary group is set other than the default of Domain Users'
		
		if ($comboboxPrimaryGroup.Text -eq 'Domain Users')
		{
			Add-Logs -text 'LOG: Primary Group set to Domain Users'
		}
		else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			
			$group = (Get-ADGroup -Identity $PrimaryGroup -Properties @('primaryGroupToken'))
			
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			
			$null = (Set-ADUser -identity $User.SamAccountName -Replace @{
					primarygroupid = $group.primaryGroupToken
				})
		}
		
		Add-Logs -text 'LOG: Done'
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		
		if ($comboboxOUTree.Text -ne $null)
		{
			add-logs -text 'LOG: Specific OU specified, moving user'
			
			$CanocicalName = $comboboxOUTree.text
			
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq 
$CanocicalName }).DistinguishedName"
			$OUTOMove = ((Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object -FilterScript {
						$_.CanonicalName -eq $CanocicalName
					}).DistinguishedName)
			
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$null = ($User | Move-ADObject -TargetPath $OUTOMove)
			
			add-logs -text 'LOG: Done'
		}
		else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		
		try
		{
			$null = (New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text)
		}
		catch
		{
			add-logs -text "WARN: $_"
			
			$InfoMessage = $_
			$InfoTitle = 'Warning'
			
			$null = (Show-MessageBox_psf)
		}
		$User = (Get-ADUser -Filter * -Properties * | Where-Object -FilterScript {
				($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)))
			})
		
		add-logs -text 'LOG: User has been created'
		
		# Check if Account is set to expire at a specific time
		Add-Logs -text 'LOG: Checking if User account expiration is set'
		
		if ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text 'LOG: User account expiration is set'
			
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + ' ' + $datetimepickerTIME.Value.ToShortTimeString())
			
			Add-Logs -text "Account will be disabled on $Timespan"
			
			$null = (Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan)
			
			Add-Logs -text 'LOG: Done'
		}
		else
		{
			Add-Logs -text 'LOG: User account expiration not set'
		}
		
		$Proxys = @()
		
		add-logs -text 'LOG: Getting user proxy addresses to set'
		
		$Proxys += $textboxproxyaddress.Lines
		
		if ($Proxys -ne $null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text 'LOG: Adding proxy addresses'
				add-logs -text 'LOG: Getting user proxy addresses to set'
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				
				$null = (Set-ADUser -Identity $User -Add @{
						proxyAddresses = $Proxy
					})
			}
		}
		else
		{
			add-logs -text 'LOG: No proxys were found to add'
		}
		
		add-logs -text 'LOG: Done with Proxys'
		add-logs -text 'LOG: Getting user employeeType attribute to set'
		
		if ($textboxemployeeType.text -ne '')
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			
			$null = (Set-ADUser -Identity $User -Add @{
					EmployeeType = $textboxemployeeType.text
				})
		}
		else
		{
			add-logs -text 'LOG: No employeeType to add'
		}
		
		add-logs -text 'LOG: Done with employeeType'
		add-logs -text 'LOG: Getting user employeeNumber attribute to set'
		
		if ($textboxemployeenumber.text -ne '')
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			$null = (Set-ADUser -Identity $User -EmployeeNumber $textboxemployeenumber.text)
		}
		else
		{
			add-logs -text 'LOG: No employeeNumber to add'
		}
		
		add-logs -text 'LOG: Done with employeeNumber'
		add-logs -text 'LOG: Getting user employeeID attribute to set'
		
		if ($textboxEmployeeID.Text -ne '')
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			$null = (Set-ADUser -Identity $User -EmployeeID $textboxEmployeeID.text)
		}
		else
		{
			add-logs -text 'LOG: No employeeID to add'
		}
		
		add-logs -text 'LOG: Done with employeeID'
		
		# Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		
		$groups = $checkedlistboxGroups.CheckedItems
		
		if ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $group -Members $User"
				
				$null = (Add-ADGroupMember -Identity $group -Members $User)
			}
		}
		else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text 'LOG: Done'
		
		Add-Logs -text 'LOG: Checking if primary group is set other than the default of Domain Users'
		if ($comboboxPrimaryGroup.Text -eq 'Domain Users')
		{
			Add-Logs -text 'LOG: Primary Group set to Domain Users'
		}
		else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			
			$group = Get-ADGroup -Identity $PrimaryGroup -Properties @('primaryGroupToken')
			
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			
			$null = (Set-ADUser -identity $User.SamAccountName -Replace @{
					primarygroupid = $group.primaryGroupToken
				})
		}
		
		Add-Logs -text 'LOG: Done'
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		
		if ($comboboxOUTree.Text -ne $null)
		{
			add-logs -text 'LOG: Specific OU specified, moving user'
			
			$CanocicalName = $comboboxOUTree.Text
			
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			
			$OUTOMove = ((Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object -FilterScript {
						$_.CanonicalName -eq $CanocicalName
					}).DistinguishedName)
			
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			
			$User | Move-ADObject -TargetPath $OUTOMove
			
			add-logs -text 'LOG: Done'
		}
		else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	
	# If DirSync is enabled
	if ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		if (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			
			try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock {
					Start-ADSyncSyncCycle
				} -ErrorAction Stop
			}
			catch
			{
				add-logs -text "WARN: $_"
				
				$null = (Add-Type -AssemblyName System.Windows.Forms)
				[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			
			add-logs -text 'LOG: Done'
		}
		else
		{
			add-logs -text 'WARN: ADSync Server text box is empty'
			
			$null = (Add-Type -AssemblyName System.Windows.Forms)
			[Windows.Forms.MessageBox]::Show('Please enter an AD Sync server', 'Warning', 'OK', 'Warning')
		}
	}
	# If DirSync is not enabled
	else
	{
		add-logs -text 'LOG: User is not being AD-Synced'
		add-logs -text 'LOG: All required parameters are valid'
		
		#Check to see if the user is being enabled upon creation or disabled
		
		# User is going to be disabled
		add-logs -text 'LOG: Checking enabled status of user'
		
		if ($checkboxBlockCred.Checked -eq $true)
		{
			#If user is going to be disabled
			add-logs -text 'LOG: User is Disabled'
			add-logs -text 'LOG: Creating user'
			
			if (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = 'Warning'
				Show-MessageBox_psf
			}
			else
			{
				if ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object -Process {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
				}
				catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = 'Warning'
					Show-MessageBox_psf
				}
				
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				if ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $group"
						$GroupGuid = ((Get-MsolGroup -All | Where-Object -FilterScript {
									$_.displayname -eq $group
								}).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				if ($Licenses2Add -ne $null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((Get-Date) + $ts).ToString('HH:mm')
					do
					{
						$DateNow = (Get-Date).ToString('HH:mm')
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					until (((Get-Mailbox | Where-Object -FilterScript {
									$_.DisplayName -eq $textboxO365DisplayName.text
								}) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					if ($textboxO365EmailAddress.Text -like '*@*')
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						if ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object -FilterScript {
									$_.DisplayName -eq $textboxO365DisplayName.text
								}
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text 'LOG: Done'
							}
							catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						else
						{
							add-logs -text 'LOG: E-Mail entered is the same as UPN, skipping.'
						}
					}
					else
					{
						add-logs -text 'LOG: No E-Mail entered'
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					if ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object -FilterScript {
							$_.DisplayName -eq $textboxO365DisplayName.text
						}
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{
								add = "$Proxy"
							}
							add-logs -text 'LOG: Done'
						}
					}
					else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					if ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MsolUser | Where-Object -FilterScript {
							$_.Displayname -eq $textboxO365DisplayName.text
						}
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							if ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text 'LOG: Done'
							}
							else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $group -Member $DN"
								try
								{
									Add-DistributionGroupMember -Identity "$group" -Member ($User).DisplayName
								}
								catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					if ($SharedMailboxes -ne $null)
					{
						$User = Get-MsolUser | Where-Object -FilterScript {
							$_.Displayname -eq $textboxO365DisplayName.text
						}
						$DN = ($User).DisplayName
						if ($comboboxsharedmaiboxpermission.SelectedItem -eq 'Full Access')
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								if ($Automap -eq 'False')
								{
									Add-Logs -text 'LOG: AutoMapping set to False'
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								else
								{
									Add-Logs -text 'LOG: AutoMapping set to True'
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						elseif ($comboboxsharedmaiboxpermission.SelectedItem -eq 'Send As')
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$false
								Add-Logs -text 'LOG: Done'
							}
						}
						else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					if ($comboboxO365HidefromGAL.SelectedItem -eq $true)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object -FilterScript {
							$_.DisplayName -eq $textboxO365DisplayName.text
						}
						if ($null -ne $Mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = 'User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoTitle = 'Warning'
							Show-MessageBox_psf
						}
					}
					else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				if ($comboboxMFA.Selecteditem -eq 'True')
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = '*'
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				if ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				else
				{
					Add-Logs -text 'LOG: OWA Enabled'
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				if ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
				}
				
				Add-Logs -text 'LOG: Done'
			}
		}
		else
		{
			#User is going to be enabled upon creation
			add-logs -text 'LOG: User is Enabled'
			add-logs -text 'LOG: Creating user'
			if (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = 'Warning'
				Show-MessageBox_psf
			}
			else
			{
				if ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object -Process {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
				}
				catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = 'Warning'
					Show-MessageBox_psf
				}
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				if ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $group"
						$GroupGuid = ((Get-MsolGroup -All | Where-Object -FilterScript {
									$_.displayname -eq $group
								}).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				if ($Licenses2Add -ne $null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((Get-Date) + $ts).ToString('HH:mm')
					do
					{
						$DateNow = (Get-Date).ToString('HH:mm')
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					until (((Get-Mailbox | Where-Object -FilterScript {
									$_.DisplayName -eq $textboxO365DisplayName.text
								}) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					if ($textboxO365EmailAddress.Text -like '*@*')
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						if ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object -FilterScript {
									$_.DisplayName -eq $textboxO365DisplayName.text
								}
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text 'LOG: Done'
							}
							catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						else
						{
							add-logs -text 'LOG: E-Mail entered is the same as UPN, skipping.'
						}
					}
					else
					{
						add-logs -text 'LOG: No E-Mail entered'
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					if ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object -FilterScript {
							$_.DisplayName -eq $textboxO365DisplayName.text
						}
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{
								add = "$Proxy"
							}
							add-logs -text 'LOG: Done'
						}
					}
					else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					if ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MsolUser | Where-Object -FilterScript {
							$_.Displayname -eq $textboxO365DisplayName.text
						}
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							if ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text 'LOG: Done'
							}
							else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $group -Member $DN"
								try
								{
									Add-DistributionGroupMember -Identity "$group" -Member ($User).DisplayName
								}
								catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					if ($SharedMailboxes -ne $null)
					{
						$User = Get-MsolUser | Where-Object -FilterScript {
							$_.Displayname -eq $textboxO365DisplayName.text
						}
						$DN = ($User).DisplayName
						if ($comboboxsharedmaiboxpermission.SelectedItem -eq 'Full Access')
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								if ($Automap -eq 'False')
								{
									Add-Logs -text 'LOG: AutoMapping set to False'
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								else
								{
									Add-Logs -text 'LOG: AutoMapping set to True'
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						elseif ($comboboxsharedmaiboxpermission.SelectedItem -eq 'Send As')
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$false
								Add-Logs -text 'LOG: Done'
							}
						}
						else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					if ($comboboxO365HidefromGAL.SelectedItem -eq $true)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object -FilterScript {
							$_.DisplayName -eq $textboxO365DisplayName.text
						}
						if ($null -ne $Mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = 'User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoTitle = 'Warning'
							Show-MessageBox_psf
						}
					}
					else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				if ($comboboxMFA.Selecteditem -eq 'True')
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = '*'
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				if ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				else
				{
					Add-Logs -text 'LOG: OWA Enabled'
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				if ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
				}
				
				Add-Logs -text 'LOG: Done'
			}
		}
	}
}

function Update-O365DisplayNameTextBox
{
	$copyuser = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365DisplayName -ErrorAction SilentlyContinue).UserFormatO365DisplayName
		#Create an array that we will use for formatting
		$O365DisplayNameFormatString = @()
		if (($null -eq $config) -or ($config -eq ''))
		{
			$config = '%Firstname% %LastName%'
			$null = Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365DisplayName -Value '%FirstName% %LastName%' -Force
		}
		$config -split '%' | ForEach-Object -Process {
			if ($_ -eq 'FirstName')
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text
			}
			elseif ($_ -eq 'LastName')
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text
			}
			elseif ($_ -like ' ')
			{
				$space = ' '
				$O365DisplayNameFormatString += $space
			}
			elseif (($_ -eq 'UPN') -or ($_ -eq 'UserPrincipalName'))
			{
				$O365DisplayNameFormatString += $textboxUserLogonName.text
			}
			elseif (($_ -eq 'Email') -or ($_ -eq 'E-Mail'))
			{
				$O365DisplayNameFormatString += $textboxO365EmailAddress.text
			}
			elseif ($_ -eq 'FirstLetterFirstName')
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'FirstLetterLastName')
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'UserPrincipalNameDomain')
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			elseif ($_ -eq 'UPNDomain')
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			else
			{
				$O365DisplayNameFormatString += $_
			}
			$textboxO365DisplayName.Text = [String]::Join('', $O365DisplayNameFormatString)
		}
	}
}

function Update-O365EmailTextbox
{
	$copyuser = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365Email -ErrorAction SilentlyContinue).UserFormatO365Email
		if (($null -eq $config) -or ($config -eq ''))
		{
			$config = '%FirstLetterFirstName%%LastName%%UserPrincipalNameDomain%'
			$null = Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365Email -Value $config -Force
		}
		#Create an array that we will use for formatting
		$O365EmailFormatString = @()
		$config -split '%' | ForEach-Object -Process {
			if ($_ -eq 'FirstName')
			{
				$O365EmailFormatString += $textboxO365FirstName.Text
			}
			elseif ($_ -eq 'LastName')
			{
				$O365EmailFormatString += $textboxO365LastName.Text
			}
			elseif ($_ -like ' ')
			{
				$space = ' '
				$O365EmailFormatString += $space
			}
			elseif (($_ -eq 'UPN') -or ($_ -eq 'UserPrincipalName'))
			{
				$O365EmailFormatString += $textboxUserLogonName.text
			}
			elseif ($_ -eq 'FirstLetterFirstName')
			{
				$O365EmailFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'FirstLetterLastName')
			{
				$O365EmailFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'UserPrincipalNameDomain')
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			elseif ($_ -eq 'UPNDomain')
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			else
			{
				$O365EmailFormatString += $_
			}
			$textboxO365EmailAddress.Text = [String]::Join('', $O365EmailFormatString)
		}
	}
}

function Update-O365UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365UserPrincipalName -ErrorAction SilentlyContinue).UserFormatO365UserPrincipalName
		#Create an array that we will use for formatting
		$O365UserPrincipalNameFormatString = @()
		$config -split '%' | ForEach-Object -Process {
			if ($_ -eq 'FirstName')
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text
			}
			elseif ($_ -eq 'LastName')
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text
			}
			elseif ($_ -like ' ')
			{
				$space = ' '
				$O365UserPrincipalNameFormatString += $space
			}
			elseif ($_ -eq 'FirstLetterFirstName')
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'FirstLetterLastName')
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			elseif (($_ -eq 'Email') -or ($_ -eq 'E-Mail'))
			{
				$O365UserPrincipalNameFormatString += $textboxO365EmailAddress.text
			}
			else
			{
				$O365UserPrincipalNameFormatString += $_
			}
			$textboxO365UPN.Text = [String]::Join('', $O365UserPrincipalNameFormatString)
		}
	}
}

#endregion

$MainForm_Load = {
	$MFALogin = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	if ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	
	
	
	
	$DarkMode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode)
	
	if ($DarkMode -eq 1)
	{
		$null = (Set-DarkMode)
	}
	else
	{
		$null = (Set-LightMode)
	}
}

$MainForm_DuringShow = {
	$null = (Import-Module -Name ActiveDirectory -ErrorAction SilentlyContinue)
	$null = (Import-Module -Name ADSync -ErrorAction SilentlyContinue)
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	$copyOffice365UserToolStripMenuItem.Enabled = $false
	$textboxADSyncServer.Enabled = $false
	$datetimepickerDATE.Refresh()
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	$datetimepickerTIME.Text = '05:00 PM'
	$MainForm.MaximizeBox = $false
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	$comboboxO365HidefromGAL.SelectedIndex = 1
	
	# DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $false
	
	# Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = 'Please connect to Office 365 to assign a license'
	
	# DEBUG
	$tabcontrolUserProperties.Enabled = $false
	$buttonCreateUser.Enabled = $false
	$labelO365Groups.Text = 'To add your user to a Mail Enabled Group, please connect to Office 365'
	$labelsharedmailboxes.text = 'To grant your user permissions on a Shared Mailbox, please connect to Office 365'
	$labelSecurityGroups.Text = 'To add your user to a Security Group, please connect to Office 365'
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	$null = (Update-ComboBox -ComboBox $comboboxO365Domains -Items 'Please connect to Office 365')
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode)
	
	if ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = 'US'
	}
	else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = 'False'
	$labelTimeLeft.Text = ''
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	$null = (Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items 'Domain Users')
	
	$comboboxPrimaryGroup.SelectedItem = 'Domain Users'
	
	$AlwaysADCreate = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	if ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	if ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
	
	$comboboxActiveSync.SelectedItem = 'True'
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		try
		{
			New-MUCUser
		}
		catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	#If only Office 365 user is being created 
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		try
		{
			New-MUCO365User
		}
		catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		try
		{
			New-MUCUser
		}
		catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		try
		{
			New-MUCO365User
		}
		catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	if ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = 'Display Name:'
			$labelDisplayName.ForeColor = 'White'
		}
		elseif ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = '*Display Name:'
			$labelDisplayName.ForeColor = 'LightCoral'
		}
	}
	else
	{
		if ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = 'Display Name:'
			$labelDisplayName.ForeColor = 'Black'
		}
		elseif ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = '*Display Name:'
			$labelDisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	if ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	if ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ''
	}
	else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	if ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	if ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ''
	}
	else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	if ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	if ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ''
	}
	else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	if ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	if ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	else
	{
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object -Property {
				Get-Random
			})[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = 'Confirm Password:'
			$labelConfirmPassword.ForeColor = 'White'
		}
		elseif ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = '*Confirm Password:'
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
	}
	else
	{
		if ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = 'Confirm Password:'
			$labelConfirmPassword.ForeColor = 'Black'
		}
		elseif ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = '*Confirm Password:'
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
	}
	
	
	if (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ''
	}
	else
	{
		if (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			if ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
			else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
		}
		elseif (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			if ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = 'Passwords match!'
			}
			else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = 'Passwords match!'
			}
			
			#Create just an AD User
			if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
		else
		{
			$labelpasswordconfirmmessage.Text = ''
		}
	}
}

$buttonCopyOnPremUser_Click = {
	if ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text 'LOG: Copying AD User attributes to Office 365 user'
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text 'LOG: Copy Finished!'
	}
	else
	{
		add-logs -text 'WARN: No Active Directory User is being created'
		$InfoMessage = 'No Active Directory user is being created, there is nothing to copy'
		$InfoTitle = 'Warning'
		Show-MessageBox_psf
	}
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	if ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		if ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = 'Confirm Password:'
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		else
		{
			$labelO365userconfirmpassword.Text = 'Confirm Password:'
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		if (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	elseif ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		if ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = '*Confirm Password:'
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		else
		{
			$labelO365userconfirmpassword.Text = '*Confirm Password:'
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
	}
	
	if (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ''
	}
	else
	{
		if (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			if ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
			else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
		}
		else
		{
			if ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = 'Passwords match!'
			}
			else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = 'Passwords match!'
			}
			
			#Create just an AD User
			if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	if ($radiobuttonNonMFALogin.Checked -eq $true)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message 'Please enter your Office 365 credentials to connect to Exchange Online and MSOnline'
		add-logs -text 'LOG: Done'
		if ($credential -eq $null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = 'No credentials were entered. Please enter valid Office 365 credentials'
			$InfoTitle = 'Warning'
			Show-MessageBox_psf
		}
		else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module -Name MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri 'https://outlook.office365.com/powershell-liveid/' -Authentication 'Basic' -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession -Session $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + '\Apps\2.0\') -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object -FilterScript {
				$_ -notmatch '_none_'
			} | Select-Object -First 1)
		if ($Modules -eq $null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = 'Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps'
			$InfoTitle = 'Warning'
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module -Name "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession -Session $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		$copyOffice365UserToolStripMenuItem.Enabled = $true
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		if ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = 'Connected'
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		else
		{
			$labelconnectionstatus.Text = 'Connected'
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		$labelO365Groups.Text = 'To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox'
		$labelsharedmailboxes.text = 'To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox'
		$labelSecurityGroups.Text = 'Please select any Security Groups you want to add your new user to'
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $false
		$buttonConnectToOffice365.Text = 'Connected to Office 365'
		$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		if ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		if (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object -FilterScript {
				$_.Status -eq 'Verified'
			} | Select-Object -ExpandProperty Name)
		if ($Domains -ne $null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += '@' + $Domain
			}
		}
		else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = 'No verified Domains were found'
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object -FilterScript {
			$_.ActiveUnits -ne $_.ConsumedUnits
		}
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ':' | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			if (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ''
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File -FilePath "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = 'Click to select an Office 365 license'
		
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup -All | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup -All | Where-Object -FilterScript {
				($_.GroupType -eq 'DistributionList') -or ($_.GroupType -eq 'MailEnabledSecurity')
			} | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup -All | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup -All | Where-Object -FilterScript {
				$_.GroupType -eq 'Security'
			} | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = 'Please select any Security Groups you want to add your new user to'
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = 'To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox'
		
		$labelsharedmailboxes.text = 'To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox'
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object -FilterScript {
			$_.RecipientTypeDetails -eq 'SharedMailbox'
		} | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = 'False'
	}
	else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	if ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	else
	{
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object -Property {
				Get-Random
			})[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}
}


$checkboxRunADSync_CheckedChanged = {
	if ($checkboxRunADSync.Checked -eq $true)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = 'This feature is not available for AD-Synced enviornments.'
		
		$textboxADSyncServer.Enabled = $true
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $true
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = 'Please check all groups you want your user to be a member of.'
		
		$textboxADSyncServer.Enabled = $false
	}
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	if ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ''
	}
	else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	if ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	if ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ''
	}
	else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	if ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	if ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + ' ' + $textboxO365LastName.Text
	}
	else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + ' ' + $textboxO365Initials.text + '.' + $textboxO365LastName.Text
	}
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength
	$console.ScrollToCaret()
	$console.Focus()
	
	if ($global:ExternalLog -ne $null)
	{
		$console.Text | Out-File -FilePath $global:ExternalLog
	}
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ''
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ''
}

$checkboxconfigo365user_CheckedChanged = {
	if ($checkboxconfigo365user.CheckState -eq 'checked')
	{
		$tabpageOffice365.Enabled = $true
	}
	else
	{
		$tabpageOffice365.Enabled = $false
	}
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
	if (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		if ($null -ne (Get-Module -ListAvailable -Name 'ADSync'))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $true
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $true
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = 'True'
			add-logs -text 'LOG: Done'
		}
	}
	else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $true
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
	if (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		if ($null -ne (Get-Module -ListAvailable -Name 'ActiveDirectory'))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text 'Enabling Copy AD User Menu Item'
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -ExpandProperty CanonicalName)
			
			if ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = 'Warning'
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			
			$groups = Get-ADGroup -Filter * | Where-Object -FilterScript {
				($_.Name -ne 'Domain Users') -and ($_.Name -ne 'Domain Computers')
			} | Select-Object -ExpandProperty Name | Sort-Object
			
			$Global:OriginalData = $groups
			
			if ($null -eq $groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = 'Warning'
				Show-MessageBox_psf
			}
			else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			if ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = 'Warning'
				Show-MessageBox_psf
				$textboxUPNDomain.Text = 'Not Available'
			}
			else
			{
				$textboxUPNDomain.Text = $Netbiosname + '\'
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			if ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = 'Warning'
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object -Property UPNSuffixes -ExpandProperty UPNSuffixes)
				if ($extraUPNS -ne $null)
				{
					foreach ($extraUPN in $extraUPNS)
					{
						$UPNs += '@' + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += '@' + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = 'Error'
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | & "$env:windir\system32\clip.exe"
	add-logs -text 'LOG: Done'
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ''
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}



$textboxUserLogonName_TextChanged = {
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = 'User logon name: (UPN)'
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		elseif ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = '*User logon name: (UPN)'
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
	}
	else
	{
		if ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = 'User logon name: (UPN)'
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		elseif ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = '*User logon name: (UPN)'
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
	}
	
	
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	if ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = 'Password:'
			$labelPassword.ForeColor = 'White'
		}
		elseif ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = '*Password:'
			$labelPassword.ForeColor = 'LightCoral'
		}
	}
	else
	{
		if ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = 'Password:'
			$labelPassword.ForeColor = 'Black'
		}
		elseif ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = '*Password:'
			$labelPassword.ForeColor = 'Firebrick'
		}
	}
	
	
	if (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ''
	}
	else
	{
		if (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			if ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
			else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
		}
		elseif (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			if ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = 'Passwords match!'
			}
			else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = 'Passwords match!'
			}
			
			#Create just an AD User
			if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
		else
		{
			$labelpasswordconfirmmessage.Text = ''
		}
	}
}



$linklabelBradleyWyatt_LinkClicked = [Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	Start-Process -FilePath 'https://www.linkedin.com/in/bradleywyatt/'
	add-logs -text 'LOG: Done'
}

$linklabelGitHub_LinkClicked = [Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath 'https://github.com/bwya77/AD-Master-User-Creator'
	add-logs -text 'LOG: Done'
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = 'Display Name:'
			$labelO365DisplayName.ForeColor = 'White'
		}
		elseif ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = '*Display Name:'
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	else
	{
		if ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = 'Display Name:'
			$labelO365DisplayName.ForeColor = 'Black'
		}
		elseif ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = '*Display Name:'
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	if ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	if ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		Update-O365EmailTextbox
		if ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = 'UserPrincipalName:'
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		else
		{
			$labelO365UserPrincipalName.Text = 'UserPrincipalName:'
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
	}
	elseif ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		if ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = '*UserPrincipalName:'
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'
		}
		else
		{
			$labelO365UserPrincipalName.Text = '*UserPrincipalName:'
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
	}
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	if ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = 'Password:'
			$labelO365userpassword.ForeColor = 'White'
		}
		elseif ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = '*Password:'
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	else
	{
		if ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = 'Password:'
			$labelO365userpassword.ForeColor = 'Black'
		}
		elseif ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = '*Password:'
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	if (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ''
	}
	else
	{
		if (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			if ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
			else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
		}
		else
		{
			if ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = 'Passwords match!'
			}
			else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = 'Passwords match!'
			}

			# Create just an AD User
			if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			# Create AD nad O365 User (w/ ADSync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			# Create AD And O365 User (no Sync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			# Create just an O365 User no adsync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			# Create just an O365 user with ADSync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	$DarkMode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode)
	Toogle-LicenseStatus
}

$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode)
	
	if (($comboboxO365countrycode.SelectedItem -eq $null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		if ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = '*Country Code'
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		else
		{
			$labelCountryCode.Text = '*Country Code'
			$labelCountryCode.ForeColor = 'Firebrick'
		}
	}
	else
	{
		if ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = 'Country Code'
			$labelCountryCode.ForeColor = 'White'
		}
		else
		{
			$labelCountryCode.Text = 'Country Code'
			$labelCountryCode.ForeColor = 'Black'
		}
	}
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode)
	
	if ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		
		Get-PSSession | Remove-PSSession
		
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = '*Connect to Office 365'
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		
		Add-Logs -text 'LOG: Done'
		
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = 'Not Connected'
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	else
	{
		$Global:O365_Pre_Req--
		
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		
		Get-PSSession | Remove-PSSession
		
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = '*Connect to Office 365'
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		
		Add-Logs -text 'LOG: Done'
		
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = 'Not Connected'
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
}

$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = (New-Object -TypeName System.Windows.Forms.SaveFileDialog)
	$SaveChooser.title = 'Save Log File'
	$SaveChooser.filter = 'Text File|*.txt'
	$SaveChooser.ShowDialog()
	$null = ($console.Text | Out-File -FilePath $SaveChooser.Filename)
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	if ($comboboxsharedmaiboxpermission.SelectedItem -eq 'Full Access')
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		$null = (Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items 'True', 'False')
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	else
	{
		$null = (Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items '')
		$comboboxsharedmailboxautomap.Enabled = $false
	}
}

$versionToolStripMenuItem_Click = {
	$InfoMessage = "
      Version Number: $Version
      Build Date: $Builddate
      Author: Bradley Wyatt
   "
	$InfoTitle = 'Build Information'
	$null = (Show-MessageBox_psf)
}

$changelogToolStripMenuItem_Click = {
	$null = (Show-ChangeLog_psf)
}

$labelChangelog_Click = {
	$null = (Show-ChangeLog_psf)
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object -TypeName windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = 'Log File Location'
	$SaveFileDialog.filter = 'Log Text File|*.txt'
	$SaveFileDialog.ShowHelp = $true
	$result = $SaveFileDialog.ShowDialog()
	$result
	$global:ExternalLog = $SaveFileDialog.filename
	
	Write-Host -Object $result
	
	if ($result -eq 'Ok')
	{
		$labelLogFile.Text = $global:ExternalLog
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	# Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	# Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
}

$radiobuttonNever_CheckedChanged = {
	# Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	# Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan -Start ((Get-Date -Format 'dddd, MMMM, dd, yyyy') + ' ' + (Get-Date -Format 'HH:mm')) -End (($datetimepickerDATE.Value.ToLongDateString()) + ' ' + $datetimepickerTIME.Value.ToString('HH:mm')))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan -Start ((Get-Date -Format 'dddd, MMMM, dd, yyyy') + ' ' + (Get-Date -Format 'HH:mm')) -End (($datetimepickerDATE.Value.ToLongDateString()) + ' ' + $datetimepickerTIME.Value.ToString('HH:mm')))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
}

$checkedlistboxGroups_SelectedIndexChanged = {
	if ($click -ne 1)
	{
		$CachedCheckedGroups = (Get-Content -Path $CacheGroups -ErrorAction SilentlyContinue)
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object -Process {
			# If checked and not in file, add and append
			$CheckItem = (Get-Content -Path $CacheGroups | Select-String -Pattern $_)
			
			if ($null -eq $CheckItem)
			{
				$null = ($_ | Out-File -FilePath $CacheGroups -Force -Append)
			}
		}
		
		$CachedCheckedGroups = ( Get-Content -Path $CacheGroups -ErrorAction SilentlyContinue)

		# Get all unchecked items
		$UncheckedItems = ($checkedlistboxGroups.Items | Where-Object -FilterScript {
			$checkedlistboxGroups.CheckedItems -notcontains $_
		})
		
		# Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object -Process {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			if ($_.SideIndicator -eq '==')
			{
				# Remove the item that is present on the list but unchecked from the file
				$Info = ($CachedCheckedGroups | Select-String -Pattern $_.InputObject -NotMatch)
				$InfoMessage = $Info
				$null = ($Info | Out-File -FilePath $CacheGroups -Force -ErrorAction SilentlyContinue)
			}
		}
	}

	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += 'Domain Users'
	$null = (Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items)
}

$optionsToolStripMenuItem_Click = {
	$null = (Show-OptionsMenu_psf)
	
	$DarkMode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode)
	
	if ($DarkMode -eq 1)
	{
		$null = (Set-DarkMode)
	}
	else
	{
		$null = (Set-LightMode)
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription)
	
	if ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxoffice_FocusChanged = {
	$ADOffice = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice)
	
	if ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName)
	
	if ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
}



$textboxStreet_FocusChanged = {
	$ADStreet = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet)
	
	if ($ADStreet -eq 1)
	{
		$words = $textboxStreet.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxStreet.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxcity_FocusChanged = {
	$ADCity = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity)
	
	if ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxstate_FocusChanged = {
	$ADState = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState)
	if ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle)
			
	if ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	
	if ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	if ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxSearchGroups_TextChanged = {
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object -FilterScript {
		$_ -like "*$Filter*"
	}
	
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content -Path $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object -Process {
		if ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
}

$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = ($OriginalDataSecurityGroups | Where-Object -FilterScript {
		$_ -like "*$Filter*"
	})
	$null = (Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results)
	
	Get-Content -Path $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object -Process {
		if ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	$textboxSearchO365SecurityGroups.Focus()
}

$textboxO365MailGroups_TextChanged = {
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object -FilterScript {
		$_ -like "*$Filter*"
	}
	$null = (Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results)
	
	Get-Content -Path $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object -Process {
		if ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	$textboxO365MailGroups.Focus()
}

$textboxO365street_FocusChanged = {
	$O365Street = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	
	if ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365city_FocusChanged = {
	$O365City = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	
	if ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged = {
	$O365State = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	
	if ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxemployeenumber_TextChanged = {
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmployeeID_TextChanged = {
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged = {
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$copyActiveDirectoryUserToolStripMenuItem_Click = {
	# Set value to 1 so we dont have string settings get in the way
	$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force)
	Show-CopyFromUser_psf
	$copyuser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object -FilterScript {
			$_.Name -like $copyuser
		})[0]
	$UserTemplate = (Get-ADUser -identity ($UserJob).ObjectGuid -properties *)
	Copy-ADUserAttributes
	#Set back to 0
	$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force)
	$null = (Get-Job | Remove-Job)
}

$textboxSamAccount_TextChanged = {
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxSamAccount_FocusChanged = {
	Update-DisplayNameTextbox
}

$clearFormToolStripMenuItem_Click = {
	Reset-Form
}

$exitToolStripMenuItem1_Click = {
	$MainForm.close()
}

$copyToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	if ($DarkMode -eq 1)
	{
		Set-DarkMode
	}
	else
	{
		Set-LightMode
	}
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	
	if ($CopyO365User -ne 1)
	{
		if ($click -ne 1)
		{
			$CachedCheckedDistroGroups = (Get-Content -Path $CacheDistroGroupsFile -ErrorAction SilentlyContinue)		
			$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object -Process {
				# If checked and not in file, add and append
				$CheckItem = (Get-Content -Path $CacheDistroGroupsFile | Select-String -Pattern $_)
				
				if ($null -eq $CheckItem)
				{
					$null = ($_ | Out-File -FilePath $CacheDistroGroupsFile -Force -Append)
				}
			}
			
			$CachedCheckedDistroGroups = (Get-Content -Path $CacheDistroGroupsFile -ErrorAction SilentlyContinue)

			# Get all unchecked items
			$UncheckedItems = ($checkedlistboxDISTROo365groups.Items | Where-Object -FilterScript {
				$checkedlistboxDISTROo365groups.CheckedItems -notcontains $_
			})
			
			# Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object -Process {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				if ($_.SideIndicator -eq '==')
				{
					# Remove the item that is present on the list but unchecked from the file
					$Info = ($CachedCheckedDistroGroups | Select-String -Pattern $_.InputObject -NotMatch)
					$InfoMessage = $Info
					$null = ($Info | Out-File -FilePath $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue)
				}
			}
		}
	}
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged = {
	$CopyO365User = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User)
	
	if ($CopyO365User -ne 1)
	{
		if ($click -ne 1)
		{
			$CachedCheckedSecurityGroups = (Get-Content -Path $CacheSecurityGroupsFile -ErrorAction SilentlyContinue)
			
			$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object -Process {
				# If checked and not in file, add and append
				$CheckItem = Get-Content -Path $CacheSecurityGroupsFile | Select-String -Pattern $_
				if ($null -eq $CheckItem)
				{
					$_ | Out-File -FilePath $CacheSecurityGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedSecurityGroups = (Get-Content -Path $CacheSecurityGroupsFile -ErrorAction SilentlyContinue)

			# Get all unchecked items
			$UncheckedItems = ($checkedlistboxO365SecurityGroups.Items | Where-Object -FilterScript {
				$checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_
			})
			
			# Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object -Process {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				if ($_.SideIndicator -eq '==')
				{
					# Remove the item that is present on the list but unchecked from the file
					$Info = ($CachedCheckedSecurityGroups | Select-String -Pattern $_.InputObject -NotMatch)
					$InfoMessage = $Info
					$null = ($Info | Out-File -FilePath $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue)
				}
			}
		}
	}
}

$checkboxUserMustChangePasswo_CheckedChanged = {
	if (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		
		$InfoMessage = 'You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
		$InfoTitle = 'Warning'
		$null = (Show-MessageBox_psf)
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	elseif (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = 'Warning'
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
}

$checkboxUserCannotChangePass_CheckedChanged = {
	if (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = 'Warning'
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
}

$checkboxPasswordNeverExpires_CheckedChanged = {
	if (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		
		$InfoMessage = 'You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
		$InfoTitle = 'Warning'
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	elseif (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = 'Warning'
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
}

$copyOffice365UserToolStripMenuItem_Click = {
	$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force)
	Show-CopyFromO365User_psf
	Copy-O365UserAttributes
	$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force)
}

$MainForm_Closing = [Windows.Forms.FormClosingEventHandler]{
	$null = (Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue)
}

$comboboxO365Domains_SelectedIndexChanged = {
	Update-O365EmailTextbox
}

$comboboxDomains_SelectedIndexChanged = {
	Update-EmailTextbox
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>