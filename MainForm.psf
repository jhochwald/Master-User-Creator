<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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
K4DFAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Show-SplashScreen
{
	<#
	.SYNOPSIS
		Displays a splash screen using the specified image.
	
	.PARAMETER Image
		Mandatory Image object that is displayed in the splash screen.
	
	.PARAMETER Title
		(Optional) Sets a title for the splash screen window. 
	
	.PARAMETER Timeout
		The amount of seconds before the splash screen is closed.
		Set to 0 to leave the splash screen open indefinitely.
		Default: 2
	
	.PARAMETER ImageLocation
		The file path or url to the image.

	.PARAMETER PassThru
		Returns the splash screen form control. Use to manually close the form.
	
	.PARAMETER Modal
		The splash screen will hold up the pipeline until it closes.

	.EXAMPLE
		PS C:\> Show-SplashScreen -Image $Image -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> Show-SplashScreen -ImageLocation 'C:\Image\MyImage.png' -Title 'Loading...' -Timeout 3

	.EXAMPLE
		PS C:\> $splashScreen = Show-SplashScreen -Image $Image -Title 'Loading...' -PassThru
				#close the splash screen
				$splashScreen.Close()
	.OUTPUTS
		System.Windows.Forms.Form
	
	.NOTES
		Created by SAPIEN Technologies, Inc.

		The size of the splash screen is dependent on the image.
		The required assemblies to use this function outside of a WinForms script:
		Add-Type -AssemblyName System.Windows.Forms
		Add-Type -AssemblyName System.Drawing
#>
	[OutputType([System.Windows.Forms.Form])]
	param
	(
		[Parameter(ParameterSetName = 'Image',
					  Mandatory = $true,
					  Position = 1)]
		[ValidateNotNull()]
		[System.Drawing.Image]
		$Image,
		[Parameter(Mandatory = $false)]
		[string]
		$Title,
		[int]
		$Timeout = 2,
		[Parameter(ParameterSetName = 'ImageLocation',
					  Mandatory = $true,
					  Position = 1)]
		[ValidateNotNullOrEmpty()]
		[string]
		$ImageLocation,
		[switch]
		$PassThru,
		[switch]
		$Modal
	)
	
	#Create a splash screen form to display the image.
	$splashForm = (New-Object System.Windows.Forms.Form)
	
	#Create a picture box for the image
	$pict = (New-Object System.Windows.Forms.PictureBox)
	
	if ($Image)
	{
		$pict.Image = $Image;
	}
	else
	{
		$pict.Load($ImageLocation)
	}
	
	$pict.AutoSize = $true
	$pict.Dock = 'Fill'
	$splashForm.Controls.Add($pict)
	
	# Display a title if defined.
	if ($Title)
	{
		$splashForm.Text = $Title
		$splashForm.FormBorderStyle = 'FixedDialog'
	}
	else
	{
		$splashForm.FormBorderStyle = 'None'
	}
	
	# Set a timer
	if ($Timeout -gt 0)
	{
		$timer = (New-Object System.Windows.Forms.Timer)
		$timer.Interval = $Timeout * 1000
		$timer.Tag = $splashForm
		$timer.add_Tick({
				$this.Tag.Close();
				$this.Stop()
			})
		$timer.Start()
	}
	
	# Show the form
	$splashForm.AutoSize = $true
	$splashForm.AutoSizeMode = 'GrowAndShrink'
	$splashForm.ControlBox = $false
	$splashForm.StartPosition = 'CenterScreen'
	$splashForm.TopMost = $true
	
	if ($Modal)
	{
		$splashForm.ShowDialog()
	}
	else
	{
		$splashForm.Show()
	}
	
	if ($PassThru)
	{
		return $splashForm
	}
}

function Toogle-LicenseStatus
{
	if ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = 'Please connect to Office 365 in the General tab to add your user to Groups.
      # If no license is selected for your user, this will remain disabled'
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = 'Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.

      # If no license is selected for your user, this will remain disabled'
		if (($comboboxO365countrycode.SelectedItem -eq $null) -and ($Licenses2Add.Count -ge 1))
		{
			if ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = '*Country Code'
				$labelCountryCode.ForeColor = 'LightCoral'
			}
			else
			{
				$labelCountryCode.Text = '*Country Code'
				$labelCountryCode.ForeColor = 'Firebrick'
			}
			
			$CountryCode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode)
			
			if ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = 'US'
			}
			else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		else
		{
			if ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = 'Country Code'
				$labelCountryCode.ForeColor = 'White'
			}
			else
			{
				$labelCountryCode.Text = 'Country Code'
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = 'Please select any Mail Enabled groups to add your user to'
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = 'Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select'
		
		if (($comboboxO365countrycode.SelectedItem -eq $null) -and ($Licenses2Add.Count -ge 1))
		{
			if ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = '*Country Code'
				$labelCountryCode.ForeColor = 'LightCoral'
			}
			else
			{
				$labelCountryCode.Text = '*Country Code'
				$labelCountryCode.ForeColor = 'Firebrick'
			}
			$CountryCode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode)
			
			if ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = 'US'
			}
			else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		else
		{
			if ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = 'Country Code'
				$labelCountryCode.ForeColor = 'White'
			}
			else
			{
				$labelCountryCode.Text = 'Country Code'
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}

function Update-ListBox
{
   <#
         .SYNOPSIS
         This functions helps you load items into a ListBox or CheckedListBox.
	
         .DESCRIPTION
         Use this function to dynamically load items into the ListBox control.
	
         .PARAMETER ListBox
         The ListBox control you want to add items to.
	
         .PARAMETER Items
         The object or objects you wish to load into the ListBox's Items collection.
	
         .PARAMETER DisplayMember
         Indicates the property to display for the items in this control.
	
         .PARAMETER Append
         Adds the item(s) to the ListBox without clearing the Items collection.
	
         .EXAMPLE
         Update-ListBox $ListBox1 "Red", "White", "Blue"
	
         .EXAMPLE
         Update-ListBox $listBox1 "Red" -Append
         Update-ListBox $listBox1 "White" -Append
         Update-ListBox $listBox1 "Blue" -Append
	
         .EXAMPLE
         Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
         .NOTES
         Additional information about the function.
   #>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	$null = (Add-Type -AssemblyName System.Windows.Forms)
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [Windows.Forms.ListBox+ObjectCollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ListBox.BeginUpdate()
		
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	$ListBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
   <#
         .SYNOPSIS
         This functions helps you load items into a ComboBox.
	
         .DESCRIPTION
         Use this function to dynamically load items into the ComboBox control.
	
         .PARAMETER ComboBox
         The ComboBox control you want to add items to.
	
         .PARAMETER Items
         The object or objects you wish to load into the ComboBox's Items collection.
	
         .PARAMETER DisplayMember
         Indicates the property to display for the items in this control.
	
         .PARAMETER Append
         Adds the item(s) to the ComboBox without clearing the Items collection.
	
         .EXAMPLE
         Update-ComboBox $combobox1 "Red", "White", "Blue"
	
         .EXAMPLE
         Update-ComboBox $combobox1 "Red" -Append
         Update-ComboBox $combobox1 "White" -Append
         Update-ComboBox $combobox1 "Blue" -Append
	
         .EXAMPLE
         Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
         .NOTES
         Additional information about the function.
   #>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	[CmdletBinding()]
	param
	(
		
		[switch]
		$O365
	)
	
	$Dictionary = @(
		'Honda'
		'Staple'
		'Battery'
		'Civic'
		'Chicago'
		'Winter'
		'Cubs'
		'Bears'
		'Snow'
		'Train'
		'Shoes'
		'Blue'
		'Bike'
		'Ring'
		'Watch'
		'Computer'
		'Neck'
		'Laptop'
		'Monitor'
		'Toilet'
		'Baseball'
		'Football'
		'Soccer'
		'Phone'
		'Carbondale'
		'Saluki'
		'Swim'
		'Lake'
		'Puppy'
		'Watch'
		'Royals'
		'Basketball'
		'Letter'
		'Paper'
		'Sticker'
		'Kitten'
		'Marker'
		'Highway'
		'Wire'
		'Keyboard'
		'Frisbee'
		'Disc'
		'Hawk'
		'West'
		'North'
		'East'
		'South'
		'Water'
		'Ice'
		'Dirt'
		'Taco'
		'Mouse'
		'Deer'
		'Speaker'
		'Hand'
		'Green'
		'Purple'
		'Pink'
		'Boat'
		'Toilet'
		'Sting'
		'Fish'
		'Bee'
		'White'
		'Grey'
		'Shoes'
		'Carpet'
		'Bed'
		'Pillow'
		'Sears'
		'Mustard'
		'Relish'
		'Ketchup'
		'Milk'
		'Apple'
		'Orange'
		'Flower'
		'Lotion'
		'Plane'
		'Desert'
		'Sand'
		'Beach'
		'Clouds'
		'Wagon'
		'Hair'
		'Internet'
		'Track'
		'Golf'
		'Sledding'
		'Market'
		'Window'
		'Door'
		'Deck'
		'Cards'
		'Shelf'
		'Santa'
		'Tack'
		'Building'
		'Tennis'
		'Power'
		'Sox'
		'Wrigley'
		'Tea'
		'Juice'
		'Plant'
		'Geneva'
		'City'
		'Kansas'
		'Missouri'
		'Midwest'
		'Great'
		'Box'
		'Crane'
		'Michigan'
		'Illinois'
		'Garbage'
		'Cougars'
		'Route'
		'Bridge'
		'Mountain'
		'Message'
		'Fire'
		'Taxi'
		'Bus'
		'Color'
		'Sharpie'
		'Ball'
		'Square'
		'River'
		'Navy'
		'Pier'
		'Grant'
		'Park'
		'Lincoln'
		'President'
		'Wrigley'
		'Soldier'
		'Forest'
		'Bulldog'
		'Police'
		'Taco'
		'Deep'
		'Dish'
		'Pizza'
		'Fire'
		'Ice'
		'Lion'
		'World'
		'Shoe'
		'Ant'
		'Bug'
		'Hair'
		'Beard'
		'Light'
		'Wave'
		'Field'
		'Toll'
		'Tax'
		'Money'
		'Bill'
		'Pot'
		'Pan'
	)
	
	if ($O365 -eq $true)
	{
		$word1 = (Get-Random -Maximum $Dictionary)
		$Num = (Get-Random -Maximum 99 -Minimum 0)
		$WChar = @(
			'!'
			'@'
			"$"
			'%'
			'&'
			'?'
			'#'
		)
		$Wildchar = (Get-Random -Maximum $WChar)
		$word1 + '-' + $Num + $Wildchar
	}
	else
	{
		$word1 = (Get-Random -Maximum $Dictionary)
		$word2 = (Get-Random -Maximum $Dictionary | Where-Object -FilterScript {
				$_ -ne $word1
			})
		$Word3 = (Get-Random -Maximum $Dictionary | Where-Object -FilterScript {
				($_ -ne $word1) -and ($_ -ne $word2)
			})
		$Num = Get-Random -Maximum 99 -Minimum 0
		$word1 + '-' + $word2 + '-' + $Word3 + $Num
	}
}

function Reset-Form
{
   <#
      ACTIVE DIRECTORY USER
   #>
	
	# General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ''
	$textboxInitials.Text = ''
	$textboxLastName.Text = ''
	$textboxDisplayName.Text = ''
	
	$ADDescriptionReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription)
	
	if ($ADDescriptionReset -ne 1)
	{
		$textboxDescription.Text = ''
	}
	
	$ADOfficeReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice)
	
	if ($ADOfficeReset -ne 1)
	{
		$textboxoffice.Text = ''
	}
	
	$textboxPasswordGen.Text = ''
	$maskedtextboxpassword.Text = ''
	$textboxConfirmPassword.Text = ''
	$textboxTelephone.Text = ''
	$textboxEmail.Text = ''
	$textboxWebPage.Text = ''
	
	add-logs -text 'LOG: Done'
	
	# Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ''
	$textboxSamAccount.Text = ''
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ''
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ''
	$textboxPOBox.Text = ''
	
	$ADCityReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice)
	
	if ($ADCityReset -ne 1)
	{
		$textboxcity.Text = ''
	}
	$ADStateReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState)
	
	if ($ADStateReset -ne 1)
	{
		$textboxstate.Text = ''
	}
	
	$ADZipReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADZip -ErrorAction SilentlyContinue).ADZip)
	
	if ($ADZipReset -ne 1)
	{
		$textboxzipcode.Text = ''
	}
	
	
	add-logs -text 'LOG: Done'
	
	# Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
	}
	
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	
	$textboxjobtitle.Text = ''
	
	$ADDepartmentReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment)
	
	if ($ADDepartmentReset -ne 1)
	{
		$textboxDepartment.Text = ''
	}
	
	$ADCompanyReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany)
	
	if ($ADCompanyReset -ne 1)
	{
		$textboxCompany.Text = ''
	}
	
	add-logs -text 'LOG: Done'
	
	# Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	
	$textboxprofilepath.Text = ''
	
	$ADLogonScriptReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADLogonScript -ErrorAction SilentlyContinue).ADLogonScript)
	
	if ($ADLogonScriptReset -ne 1)
	{
		$textboxlogonscript.Text = ''
	}
	
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ''
	
	add-logs -text 'LOG: Done'
	
	# Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	
	$textboxproxyaddress.Text = ''
	$textboxEmployeeID.Text = ''
	$textboxemployeenumber.Text = ''
	$textboxemployeeType.Text = ''
	
	add-logs -text 'LOG: Done'
	
   <#
      OFFICE 365 USER
   #>
	
	# General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	
	$textboxO365FirstName.Text = ''
	$textboxO365LastName.Text = ''
	$textboxO365DisplayName.Text = ''
	$textboxo365passwordgen.Text = ''
	$maskedtextboxo365password.Text = ''
	$textboxo365confirmpassword.Text = ''
	
	add-logs -text 'LOG: Done'
	
	# Account Page
	
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ''
	$textboxO365EmailAddress.Text = ''
	$textboxo365proxyaddresses.Text = ''
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = 'False'
	
	$CountryCode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode)
	
	if ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = 'US'
	}
	else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	add-logs -text 'LOG: Done'
	
	# Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	
	$textboxO365street.Text = ''
	
	$O365CityReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City)
	
	if ($O365CityReset -ne 1)
	{
		$textboxo365city.Text = ''
	}
	
	$O365StateReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State)
	
	if ($O365StateReset -ne 1)
	{
		$textboxo365state.Text = ''
	}
	
	$O365ZipReset = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365Zip -ErrorAction SilentlyContinue).O365Zip)
	
	if ($O365ZipReset -ne 1)
	{
		$textboxo365zip.Text = ''
	}
	
	
	add-logs -text 'LOG: Done'
	
	# Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
	}
	
	add-logs -text 'LOG: Done'
	
	# Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
	}
	
	add-logs -text 'LOG: Done'
	
	# Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
	}
	
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser)
	
	if ($copyuser -ne 1)
	{
		$config = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName)
		
		# Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		
		if (($null -eq $config) -or ($config -eq ''))
		{
			$config = '%Firstname% %LastName%'
			$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value '%FirstName% %LastName%' -Force)
		}
		
		$config -split '%' | ForEach-Object -Process {
			if ($_ -eq 'FirstName')
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			elseif ($_ -eq 'LastName')
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			elseif (($_ -eq 'Initial') -or ($_ -eq 'Initials'))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			elseif ($_ -like ' ')
			{
				$space = ' '
				$DisplayNameFormatString += $space
			}
			elseif ($_ -eq 'EmployeeID')
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			elseif ($_ -eq 'EmployeeNumber')
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			elseif ($_ -eq 'SamAccountName')
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			elseif (($_ -eq 'UPN') -or ($_ -eq 'UserPrincipalName'))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			elseif (($_ -eq 'Email') -or ($_ -eq 'E-Mail'))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			elseif ($_ -eq 'FirstLetterFirstName')
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'FirstLetterLastName')
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'SamAccountName')
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			elseif ($_ -eq 'UserPrincipalNameDomain')
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			elseif ($_ -eq 'UPNDomain')
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
		}
	}
}

function Update-EmailTextbox
{
	$copyuser = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser)
	
	if ($copyuser -ne 1)
	{
		$config = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail)
		
		# Create an array that we will use for formatting
		$EmailFormatString = @()
		
		if (($null -ne $config) -and ($config -ne ''))
		{
			$config -split '%' | ForEach-Object -Process {
				if ($_ -eq 'FirstName')
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				elseif ($_ -eq 'LastName')
				{
					$EmailFormatString += $textboxLastName.Text
				}
				elseif (($_ -eq 'Initial') -or ($_ -eq 'Initials'))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				elseif ($_ -like ' ')
				{
					$space = ' '
					$EmailFormatString += $space
				}
				elseif ($_ -eq 'EmployeeID')
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				elseif ($_ -eq 'EmployeeNumber')
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				elseif ($_ -eq 'SamAccountName')
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				elseif (($_ -eq 'UPN') -or ($_ -eq 'UserPrincipalName'))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				elseif (($_ -eq 'Email') -or ($_ -eq 'E-Mail'))
				{
					$EmailFormatString += $textboxEmail.text
				}
				elseif ($_ -eq 'FirstLetterFirstName')
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				elseif ($_ -eq 'FirstLetterLastName')
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				elseif ($_ -eq 'SamAccountName')
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				elseif ($_ -eq 'UserPrincipalNameDomain')
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				elseif ($_ -eq 'UPNDomain')
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				else
				{
					$EmailFormatString += $_
				}
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser)
	
	if ($copyuser -ne 1)
	{
		$config = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName)
		
		# Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		
		if (($null -ne $config) -and ($config -ne ''))
		{
			$config -split '%' | ForEach-Object -Process {
				if ($_ -eq 'FirstName')
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				elseif ($_ -eq 'LastName')
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				elseif (($_ -eq 'Initial') -or ($_ -eq 'Initials'))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				elseif ($_ -like ' ')
				{
					$space = ' '
					$SamAccountNameFormatString += $space
				}
				elseif ($_ -eq 'EmployeeID')
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				elseif ($_ -eq 'EmployeeNumber')
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				elseif ($_ -eq 'SamAccountName')
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				elseif (($_ -eq 'UPN') -or ($_ -eq 'UserPrincipalName'))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				elseif (($_ -eq 'Email') -or ($_ -eq 'E-Mail'))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				elseif ($_ -eq 'FirstLetterFirstName')
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				elseif ($_ -eq 'FirstLetterLastName')
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				elseif ($_ -eq 'SamAccountName')
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				else
				{
					$SamAccountNameFormatString += $_
				}
			}
			
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser)
	
	if ($copyuser -ne 1)
	{
		$config = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName)
		
		# Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		
		if (($null -ne $config) -and ($config -ne ''))
		{
			$config -split '%' | ForEach-Object -Process {
				if ($_ -eq 'FirstName')
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				elseif ($_ -eq 'LastName')
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				elseif (($_ -eq 'Initial') -or ($_ -eq 'Initials'))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				elseif ($_ -like ' ')
				{
					$space = ' '
					$UserPrincipalNameFormatString += $space
				}
				elseif ($_ -eq 'EmployeeID')
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				elseif ($_ -eq 'EmployeeNumber')
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				elseif ($_ -eq 'SamAccountName')
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				elseif (($_ -eq 'UPN') -or ($_ -eq 'UserPrincipalName'))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				elseif (($_ -eq 'Email') -or ($_ -eq 'E-Mail'))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				elseif ($_ -eq 'FirstLetterFirstName')
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				elseif ($_ -eq 'FirstLetterLastName')
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				elseif ($_ -eq 'SamAccountName')
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				elseif ($_ -eq 'UserPrincipalNameDomain')
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				elseif ($_ -eq 'UPNDomain')
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				else
				{
					$UserPrincipalNameFormatString += $_
				}
			}
			
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = '44,44,44'
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = '44,44,44'
	$MainForm.ForeColor = 'White'
	$labelLogFile.BackColor = '44,44,44'
	$labelLogFile.ForeColor = 'White'
	$labelconnectionstatus.ForeColor = 'LightCoral'
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = '44,44,44'
	$groupboxStatus.ForeColor = 'White'
	$tabpageSettings.BackColor = '44,44,44'
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	$menustrip1.BackColor = '44,44,44'
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object -Process {
				if ($_ -is [Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = '44,44,44'
					$_.ForeColor = 'White'
				}
			}
		}
	}
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = '44,44,44'
			$_.ForeColor = 'White'
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = '44,44,44'
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = '44,44,44'
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradleyWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	$console.BackColor = '35,35,35'
	$console.ForeColor = 'White'
	$buttonExit.ForeColor = 'white'
	$buttonExit.BackColor = '35,35,35'
	$buttonCreateUser.ForeColor = 'white'
	$buttonCreateUser.BackColor = '35,35,35'
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = '44,44,44'
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = '44,44,44'
	
	$tabcontrolUserProperties.TabPages | ForEach-Object -Process {
		$_.ForeColor = 'White'
		$_.BackColor = '44,44,44'
	}
	
	$tabcontrol1.TabPages | ForEach-Object -Process {
		$_.ForeColor = 'White'
		$_.BackColor = '44,44,44'
	}
	
	# GENERAL PAGE
	$groupboxADSync.ForeColor = 'White'
	$panel1.BackColor = '35,35,35'
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'
	
	$tabpageGeneral.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	# ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = '35,35,35'
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = '35,35,35'
	$panel2.ForeColor = 'White'
	$panel2.BackColor = '35,35,35'
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = '35,35,35'
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = '35,35,35'
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = '44,44,44'
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	# ADDRESS PAGE
	$tabpageAddress.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	# GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = '35,35,35'
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = '44,44,44'
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = '35,35,35'
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = '35,35,35'
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	# ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	# PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = '35,35,35'
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = '35,35,35'
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = '35,35,35'
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = '35,35,35'
	
	# ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	# OFFICE 365
	$tabcontrolO365.BackColor = '44,44,44'
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	
	# GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$tabpageO365General.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Button])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = '44,44,44'
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = '35,35,35'
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = '35,35,35'
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = '35,35,35'
	
	$panel3.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Button])
		{
			$_.BackColor = '44,44,44'
			$_.ForeColor = 'White'
		}
	}
	
	$panel3.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$textboxo365passwordgen.BackColor = '44,44,44'
	
	if ($buttonConnectToOffice365.Text -eq '*Connect to Office 365')
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	# ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = '44,44,44'
	
	$tabpageO365Account.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$tabpageO365Account.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = '35,35,35'
	
	# ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$tabpageO365Address.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Label])
		{
			$_.ForeColor = 'White'
		}
	}
	
	$tabpageO365Address.BackColor = '44,44,44'
	$tabpageO365Address.ForeColor = 'White'
	
	# MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = '44,44,44'
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = '44,44,44'
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = '35,35,35'
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = '35,35,35'
	
	# SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = '44,44,44'
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = '35,35,35'
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = '44,44,44'
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = '35,35,35'
	$tabpagesecurityGroups.BackColor = '44,44,44'
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = '44,44,44'
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = '44,44,44'
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = '44,44,44'
	
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Label])
		{
			$_.BackColor = '44,44,44'
			$_.ForeColor = 'White'
		}
	}
	
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = '35,35,35'
			$_.ForeColor = 'White'
		}
	}
	
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = '35,35,35'
	
	# ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = 'White'
	$tabpageO365Attributes.BackColor = '44,44,44'
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = '35,35,35'
	$comboboxOWA.FlatStyle = 'Flat'
	$comboboxOWA.ForeColor = 'White'
	$comboboxOWA.BackColor = '35,35,35'
	$comboboxActiveSync.FlatStyle = 'Flat'
	$comboboxActiveSync.ForeColor = 'White'
	$comboboxActiveSync.BackColor = '35,35,35'
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = 'WhiteSmoke'
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = 'WhiteSmoke'
	$MainForm.ForeColor = 'Black'
	$labelLogFile.BackColor = 'White'
	$labelLogFile.ForeColor = 'Black'
	$labelconnectionstatus.ForeColor = 'FireBrick'
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = 'White'
	$groupboxStatus.ForeColor = 'Black'
	$tabpageSettings.BackColor = 'White'
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	$menustrip1.BackColor = 'White'
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object -Process {
				if ($_ -is [Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = 'White'
					$_.ForeColor = 'Black'
				}
			}
		}
	}
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = 'White'
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = 'White'
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradleyWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	$console.BackColor = 'White'
	$console.ForeColor = 'Black'
	$buttonExit.ForeColor = 'Black'
	$buttonExit.BackColor = 'White'
	$buttonCreateUser.ForeColor = 'Black'
	$buttonCreateUser.BackColor = 'White'
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = 'White'
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = 'White'
	
	$tabcontrolUserProperties.TabPages | ForEach-Object -Process {
		$_.ForeColor = 'Black'
		$_.BackColor = 'White'
	}
	
	$tabcontrol1.TabPages | ForEach-Object -Process {
		$_.ForeColor = 'Black'
		$_.BackColor = 'White'
	}
	
	# GENERAL PAGE
	$panel1.BackColor = 'MenuBar'
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	# ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = 'Window'
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = 'Window'
	$panel2.ForeColor = 'Black'
	$panel2.BackColor = 'MenuBar'
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = 'White'
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = 'White'
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = 'White'
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	# ADDRESS PAGE
	$tabpageAddress.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	# GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = 'White'
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = 'White'
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = 'White'
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = 'Window'
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	# ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	# PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = 'Window'
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = 'White'
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = 'White'
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = 'White'
	
	# ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	# OFFICE 365
	$tabcontrolO365.BackColor = 'White'
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	
	# GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$tabpageO365General.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Button])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = 'White'
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = 'White'
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = 'Window'
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = 'MenuBar'
	
	$panel3.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Button])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$panel3.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$textboxo365passwordgen.BackColor = 'White'
	
	if ($buttonConnectToOffice365.Text -eq '*Connect to Office 365')
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	# ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = 'White'
	
	$tabpageO365Account.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$tabpageO365Account.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = 'Window'
			$_.ForeColor = 'Black'
		}
	}
	
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = 'MenuBar'
	
	# ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.TextBox])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$tabpageO365Address.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Label])
		{
			$_.ForeColor = 'Black'
		}
	}
	
	$tabpageO365Address.BackColor = 'White'
	$tabpageO365Address.ForeColor = 'Black'
	
	# MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = 'White'
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = 'White'
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = 'White'
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = 'White'
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = 'White'
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = 'White'
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = 'White'
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = 'White'
	$tabpagesecurityGroups.BackColor = 'White'
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	# SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = 'White'
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = 'White'
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = 'White'
	
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Label])
		{
			$_.BackColor = 'White'
			$_.ForeColor = 'Black'
		}
	}
	
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object -Process {
		if ($_ -is [Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = 'Window'
			$_.ForeColor = 'Black'
		}
	}
	
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = 'White'
	
	
	# ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = 'Black'
	$tabpageO365Attributes.BackColor = 'White'
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = 'Window'
	$comboboxOWA.FlatStyle = 'Standard'
	$comboboxOWA.ForeColor = 'Black'
	$comboboxOWA.BackColor = 'Window'
	$comboboxActiveSync.FlatStyle = 'Standard'
	$comboboxActiveSync.ForeColor = 'Black'
	$comboboxActiveSync.BackColor = 'Window'
}

function Copy-ADUserAttributes
{
	Add-Logs -text 'LOG: Setting Description'
	
	$textboxDescription.Text = $UserTemplate.Description
	
	Add-Logs -text 'LOG: Setting Office'
	
	$textboxoffice.Text = $UserTemplate.Office
	
	Add-Logs -text 'LOG: Setting Office Phone'
	
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	
	Add-Logs -text 'LOG: Setting Email Address'
	
	$textboxEmail.Text = $UserTemplate.EmailAddress
	
	Add-Logs -text 'LOG: Setting Home Page'
	
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	Add-Logs -text "LOG: Changing the OU for the user to $((($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)")))"
	
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	Add-Logs -text 'LOG: Checking Password Never Expires status'
	
	if ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		Add-Logs -text 'LOG: Setting Password Never Expires to True'
		
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	else
	{
		Add-Logs -text 'LOG: Setting Password Never Expires to False'
		
		$checkboxPasswordNeverExpires.CheckState = 'UnChecked'
	}
	
	Add-Logs -text 'LOG: Checking Password Change Ability'
	
	if ($UserTemplate.CannotChangePassword -eq $true)
	{
		Add-Logs -text 'LOG: Setting User Cannot Change Password to True'
		
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	else
	{
		Add-Logs -text 'LOG: Setting User Cannot Change Password to False'
		
		$checkboxUserCannotChangePass.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text 'LOG: Checking Password Change statue'
	
	if ($UserTemplate.PasswordExpired -eq $true)
	{
		Add-Logs -text 'LOG: Setting User Must Change Password to True'
		
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	else
	{
		Add-Logs -text 'LOG: Setting User Must Change Password to False'
		
		$checkboxUserMustChangePasswo.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text 'LOG: Setting Street Address'
	
	$textboxStreet.Text = $UserTemplate.StreetAddress
	
	Add-Logs -text 'LOG: Setting PO Box'
	
	$textboxPOBox.Text = $UserTemplate.POBox
	
	Add-Logs -text 'LOG: Setting City'
	
	$textboxcity.Text = $UserTemplate.City
	
	Add-Logs -text 'LOG: Setting State'
	
	$textboxstate.Text = $UserTemplate.State
	
	Add-Logs -text 'LOG: Setting Postal Code'
	
	$textboxzipcode.Text = $UserTemplate.PostalCode
	
	Add-Logs -text 'LOG: Checking Group Memberships'
	$checkedlistboxGroups.CheckedItems = $null
	
	$CacheGroups = "$env:TEMP\MUCCacheGroups.txt"
	$click = 1
	
	($UserTemplate).MemberOf | ForEach-Object -Process {
		$GName = ((Get-ADGroup -Identity $_).name)
		
		Add-Logs -text "LOG: Adding User to the Group: $GName"
		
		$null = ($GName | Out-File -FilePath $CacheGroups -Append -Force -ErrorAction SilentlyContinue)
		
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	
	$click = 0
	
	Add-Logs -text 'LOG: Setting Job Title'
	
	$textboxjobtitle.text = $UserTemplate.Title
	
	Add-Logs -text 'LOG: Setting Department'
	
	$textboxDepartment.Text = $UserTemplate.Department
	
	Add-Logs -text 'LOG: Setting Company'
	
	$textboxCompany.Text = $UserTemplate.Company
	
	Add-Logs -text 'LOG: Setting Profile Path'
	
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	
	Add-Logs -text 'LOG: Setting Script Path'
	
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	
	Add-Logs -text 'LOG: Setting Home Drive'
	
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	
	Add-Logs -text 'LOG: Setting Home Directory'
	
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	
	Add-Logs -text 'LOG: Setting Employee Type'
	
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	Add-Logs -text 'LOG: Done'
}

function Copy-O365UserAttributes
{
	$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force)
	
	if ($Licenses2Add.count -gt 0)
	{
		$Global:Licenses2Add = (New-Object -TypeName 'System.Collections.Generic.List[System.Object]')
	}
	
	$copyuser = $CopyFromO365User_comboboxcopyuser
	
	add-logs -text "LOG: Copying attributes from $copyuser"
	
	$UserObj = (Get-MsolUser -All | Where-Object -FilterScript {
			$_.DisplayName -eq $copyuser
		}) | Select-Object -First 1
	
	add-logs -text "LOG: Getting the UPN Domain of $copyuser"
	
	$UPNDomain = ($UserObj.userprincipalname).split('@') | Select-Object -Last 1
	
	add-logs -text "LOG: Setting the UPN Domain to $UPNDomain"
	
	$comboboxO365Domains.SelectedItem = '@' + $UPNDomain
	
	add-logs -text 'LOG: Copying Country Code'
	
	$comboboxO365countrycode.SelectedText = ($UserObj).CountryCode
	
	add-logs -text "LOG: Checking MFA status of $copyuser"
	
	if ($null -eq $UserObj.StrongAuthenticationRequirements.State)
	{
		add-logs -text 'LOG: Setting MFA to False'
		
		$comboboxMFA.SelectedItem = 'False'
	}
	else
	{
		add-logs -text 'LOG: Setting MFA to True'
		
		$comboboxMFA.SelectedItem = 'True'
	}
	
	add-logs -text 'LOG: Copying City'
	
	$textboxo365city.Text = ($UserObj).city
	
	add-logs -text 'LOG: Copying State'
	
	$textboxo365state.Text = ($UserObj).state
	
	add-logs -text 'LOG: Copying Street Address'
	
	$textboxO365street.Text = ($UserObj).streetaddress
	
	add-logs -text 'LOG: Copying Postal Code'
	
	$textboxo365zip.Text = ($UserObj).postalcode
	
	if (($UserObj).PasswordNeverExpires -eq $true)
	{
		add-logs -text 'LOG: Copying Password Never Expires Flag'
		
		$checkboxO365PasswordNeverExpires.CheckState = 'Checked'
	}
	
	if (($UserObj).BlockCredential -eq $true)
	{
		add-logs -text 'LOG: Copying Disabled Account State'
		
		$checkboxBlockCred.CheckState = 'Checked'
	}
	
	add-logs -text "LOG: Getting all licenses assinged to $copyuser"
	
	$currentlicenses = ($UserObj).Licenses.accountskuid
	
	foreach ($currentlicense in $currentlicenses)
	{
		$TenantSku = (Get-MsolAccountSku | Where-Object -FilterScript {
				$_.AccountSkuID -match $currentlicense
			})
		
		if ($TenantSku.ActiveUnits -ne $TenantSku.ConsumedUnits)
		{
			$lic = ($currentlicense -split ':' | Select-Object -Last 1)
			
			# lookup skus in hashtable and convert to friendly name
			$FriendlyName = $Sku.Item("$lic")
			
			if ($null -eq $FriendlyName)
			{
				add-logs -text "LOG: Copying The License: $_"
				
				$obj = [PSCustomObject]@{
					'Name' = $lic
				}
				
				$Licenses2Add.Add($obj)
			}
			else
			{
				add-logs -text "LOG: Copying The License: $FriendlyName"
				
				$obj = [PSCustomObject]@{
					'Name' = $FriendlyName
				}
				
				$Licenses2Add.Add($obj)
			}
		}
	}
	
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	$null = (Toogle-LicenseStatus)
	
	add-logs -text "LOG: Checking Mail Group Membership for $copyuser"
	
	Get-MsolGroup -All | Where-Object -FilterScript {
		($_.GroupType -eq 'DistributionList') -or ($_.GroupType -eq 'MailEnabledSecurity')
	} | ForEach-Object -Process {
		if (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object -FilterScript {
				$_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim('SMTP:')
			})
		{
			if ($checkedlistboxDISTROo365groups.Items -contains $_.DisplayName)
			{
				$null = ($_.DisplayName | Out-File -FilePath $CacheDistroGroupsFile -Append -Force -ErrorAction SilentlyContinue)
				
				add-logs -text "LOG: Adding User to the Distribution Group: $($_.DisplayName)"
				
				$checkedlistboxDISTROo365groups.SelectedItem = $($_.DisplayName)
				$index = $checkedlistboxDISTROo365groups.SelectedIndex
				$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
			}
		}
	}
	
	Add-Logs -text "LOG: Getting all Security Groups $copyuser is a Member of"
	
	Get-MsolGroup -All | Where-Object -FilterScript {
		$_.GroupType -eq 'Security'
	} | ForEach-Object -Process {
		if (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object -FilterScript {
				$_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim('SMTP:')
			})
		{
			if ($checkedlistboxO365SecurityGroups.Items -contains $_.DisplayName)
			{
				$null = ($_.DisplayName | Out-File -FilePath $CacheSecurityGroupsFile -Append -Force -ErrorAction SilentlyContinue)
				
				add-logs -text "LOG: Adding User to the Security Group: $($_.DisplayName)"
				
				$checkedlistboxO365SecurityGroups.SelectedItem = $($_.DisplayName)
				$index = $checkedlistboxO365SecurityGroups.SelectedIndex
				$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
			}
		}
	}
	
	
	
	$UserObjMailbox = (Get-Mailbox (($UserObj.ProxyAddresses -cmatch 'SMTP:').trim('SMTP:')))
	
	Add-Logs -text 'LOG: Gettings GAL status for User'
	
	if ($UserObjMailbox.HiddenFromAddressListsEnabled -eq $true)
	{
		Add-Logs -text 'LOG: Hiding User from GAL: True'
		
		$comboboxO365HidefromGAL.SelectedItem = 'True'
	}
	else
	{
		Add-Logs -text 'LOG: Hiding User from GAL: False'
		
		$comboboxO365HidefromGAL.SelectedItem = 'False'
	}
	
	Add-Logs -text 'LOG: Getting Outlook on the Web (OWA) Status for user'
	
	if (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).OWAEnabled) -eq $true)
	{
		Add-Logs -text 'LOG: Outlook on the Web (OWA): True'
		
		$comboboxOWA.SelectedItem = 'True'
	}
	else
	{
		Add-Logs -text 'LOG: Outlook on the Web (OWA): False'
		
		$comboboxOWA.SelectedItem = 'False'
	}
	
	Add-Logs -text 'LOG: Getting ActiveSync Status for user'
	
	if (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).ActiveSync) -eq $true)
	{
		Add-Logs -text 'LOG: ActiveSync: True'
		
		$comboboxActiveSync.SelectedItem = 'True'
	}
	else
	{
		Add-Logs -text 'LOG: ActiveSync: False'
		
		$comboboxActiveSync.SelectedItem = 'False'
	}
	
	add-logs -text 'LOG: Done'
	
	$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force)
}

function License-MUCO365User
{
	$licenseforuser = @()
	
	Add-Logs -text 'LOG: Getting License selected for user'
	
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text 'LOG: Getting AccountSKU Domain'
	
	$LicenseDomain = (((((Get-MsolAccountSku).AccountSkuID) -split ':' | Select-Object -First 1) + ':').Trim())
	
	foreach ($License in $Licenses)
	{
		Add-Logs -text 'LOG: Looking up SKU for license'
		
		$Lookup = $Sku.keys | Where-Object -FilterScript {
			$Sku["$_"] -eq "$License"
		}
		
		Add-Logs "LOG: License lookup is $Lookup"
		
		if ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text 'LOG: No SKU found during lookup'
			
			$BackSKU = "$LicenseDomain$License"
			
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			
			$CheckSku = Get-MsolAccountSku | Where-Object -FilterScript {
				$_.AccountSKuID -like "*$BackSKU*"
			} | Select-Object -ExpandProperty AccountSkuID
			
			if ($CheckSku -ne $null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				
				$licenseforuser += $CheckSku
			}
			else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		else
		{
			Add-Logs -text 'LOG: Found the SKU for the license'
			
			$Lookup | ForEach-Object -Process {
				Add-Logs -text "LOG: Checking License $_"
				
				$BackSKU = "$LicenseDomain$_"
				
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				
				$CheckSku = Get-MsolAccountSku | Where-Object -FilterScript {
					$_.AccountSKuID -like "*$BackSKU*"
				} | Select-Object -ExpandProperty AccountSkuID
				
				if ($CheckSku -ne $null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		
		$licenseforuser | Out-File -FilePath "$env:TEMP\MUClicenseforuser.txt" -Force
	}
}

function New-MUCUser
{
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	
	# Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	
	# If account should be disabled
	if ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		
		try
		{
			$null = (New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text)
		}
		catch
		{
			add-logs -text "WARN: $_"
			
			$InfoMessage = $_
			$InfoTitle = 'Warning'
			$null = (Show-MessageBox_psf)
		}
		
		$User = (Get-ADUser -Filter * -Properties * | Where-Object -FilterScript {
				($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)))
			})
		
		add-logs -text 'LOG: User has been created'
		
		# Check if Account is set to expire at a specific time
		Add-Logs -text 'LOG: Checking if User account expiration is set'
		
		if ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text 'LOG: User account expiration is set'
			
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + ' ' + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			
			Add-Logs -text 'LOG: Done'
		}
		else
		{
			Add-Logs -text 'LOG: User account expiration not set'
		}
		
		$Proxys = @()
		
		add-logs -text 'LOG: Getting user proxy addresses to set'
		
		$Proxys += $textboxproxyaddress.Lines
		
		if ($Proxys -ne $null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text 'LOG: Adding proxy addresses'
				add-logs -text 'LOG: Getting user proxy addresses to set'
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				
				Set-ADUser -Identity $User -Add @{
					proxyAddresses = $Proxy
				}
			}
		}
		else
		{
			add-logs -text 'LOG: No proxys were found to add'
		}
		
		add-logs -text 'LOG: Done with Proxys'
		add-logs -text 'LOG: Getting user employeeType attribute to set'
		
		if ($textboxemployeeType.text -ne '')
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			
			$null = (Set-ADUser -Identity $User -Add @{
					EmployeeType = $textboxemployeeType.text
				})
		}
		else
		{
			add-logs -text 'LOG: No employeeType to add'
		}
		
		add-logs -text 'LOG: Done with employeeType'
		add-logs -text 'LOG: Getting user employeeNumber attribute to set'
		
		if ($textboxemployeenumber.text -ne '')
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			$null = (Set-ADUser -Identity $User -EmployeeNumber $textboxemployeenumber.text)
		}
		else
		{
			add-logs -text 'LOG: No employeeNumber to add'
		}
		
		add-logs -text 'LOG: Done with employeeNumber'
		add-logs -text 'LOG: Getting user employeeID attribute to set'
		
		if ($textboxEmployeeID.Text -ne '')
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			$null = (Set-ADUser -Identity $User -EmployeeID $textboxEmployeeID.text)
		}
		else
		{
			add-logs -text 'LOG: No employeeID to add'
		}
		
		add-logs -text 'LOG: Done with employeeID'
		
		# Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		
		$groups = $checkedlistboxGroups.CheckedItems
		
		if ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $group -Members $User"
				Add-ADGroupMember -Identity $group -Members $User
			}
		}
		else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		
		Add-Logs -text 'LOG: Done'
		Add-Logs -text 'LOG: Checking if primary group is set other than the default of Domain Users'
		
		if ($comboboxPrimaryGroup.Text -eq 'Domain Users')
		{
			Add-Logs -text 'LOG: Primary Group set to Domain Users'
		}
		else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			
			$group = (Get-ADGroup -Identity $PrimaryGroup -Properties @('primaryGroupToken'))
			
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			
			$null = (Set-ADUser -identity $User.SamAccountName -Replace @{
					primarygroupid = $group.primaryGroupToken
				})
		}
		
		Add-Logs -text 'LOG: Done'
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		
		if ($comboboxOUTree.Text -ne $null)
		{
			add-logs -text 'LOG: Specific OU specified, moving user'
			
			$CanocicalName = $comboboxOUTree.text
			
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq 
$CanocicalName }).DistinguishedName"
			$OUTOMove = ((Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object -FilterScript {
						$_.CanonicalName -eq $CanocicalName
					}).DistinguishedName)
			
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$null = ($User | Move-ADObject -TargetPath $OUTOMove)
			
			add-logs -text 'LOG: Done'
		}
		else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		
		try
		{
			$null = (New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text)
		}
		catch
		{
			add-logs -text "WARN: $_"
			
			$InfoMessage = $_
			$InfoTitle = 'Warning'
			
			$null = (Show-MessageBox_psf)
		}
		$User = (Get-ADUser -Filter * -Properties * | Where-Object -FilterScript {
				($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)))
			})
		
		add-logs -text 'LOG: User has been created'
		
		# Check if Account is set to expire at a specific time
		Add-Logs -text 'LOG: Checking if User account expiration is set'
		
		if ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text 'LOG: User account expiration is set'
			
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + ' ' + $datetimepickerTIME.Value.ToShortTimeString())
			
			Add-Logs -text "Account will be disabled on $Timespan"
			
			$null = (Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan)
			
			Add-Logs -text 'LOG: Done'
		}
		else
		{
			Add-Logs -text 'LOG: User account expiration not set'
		}
		
		$Proxys = @()
		
		add-logs -text 'LOG: Getting user proxy addresses to set'
		
		$Proxys += $textboxproxyaddress.Lines
		
		if ($Proxys -ne $null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text 'LOG: Adding proxy addresses'
				add-logs -text 'LOG: Getting user proxy addresses to set'
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				
				$null = (Set-ADUser -Identity $User -Add @{
						proxyAddresses = $Proxy
					})
			}
		}
		else
		{
			add-logs -text 'LOG: No proxys were found to add'
		}
		
		add-logs -text 'LOG: Done with Proxys'
		add-logs -text 'LOG: Getting user employeeType attribute to set'
		
		if ($textboxemployeeType.text -ne '')
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			
			$null = (Set-ADUser -Identity $User -Add @{
					EmployeeType = $textboxemployeeType.text
				})
		}
		else
		{
			add-logs -text 'LOG: No employeeType to add'
		}
		
		add-logs -text 'LOG: Done with employeeType'
		add-logs -text 'LOG: Getting user employeeNumber attribute to set'
		
		if ($textboxemployeenumber.text -ne '')
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			$null = (Set-ADUser -Identity $User -EmployeeNumber $textboxemployeenumber.text)
		}
		else
		{
			add-logs -text 'LOG: No employeeNumber to add'
		}
		
		add-logs -text 'LOG: Done with employeeNumber'
		add-logs -text 'LOG: Getting user employeeID attribute to set'
		
		if ($textboxEmployeeID.Text -ne '')
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			$null = (Set-ADUser -Identity $User -EmployeeID $textboxEmployeeID.text)
		}
		else
		{
			add-logs -text 'LOG: No employeeID to add'
		}
		
		add-logs -text 'LOG: Done with employeeID'
		
		# Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		
		$groups = $checkedlistboxGroups.CheckedItems
		
		if ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $group -Members $User"
				
				$null = (Add-ADGroupMember -Identity $group -Members $User)
			}
		}
		else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text 'LOG: Done'
		
		Add-Logs -text 'LOG: Checking if primary group is set other than the default of Domain Users'
		if ($comboboxPrimaryGroup.Text -eq 'Domain Users')
		{
			Add-Logs -text 'LOG: Primary Group set to Domain Users'
		}
		else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			
			$group = Get-ADGroup -Identity $PrimaryGroup -Properties @('primaryGroupToken')
			
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			
			$null = (Set-ADUser -identity $User.SamAccountName -Replace @{
					primarygroupid = $group.primaryGroupToken
				})
		}
		
		Add-Logs -text 'LOG: Done'
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		
		if ($comboboxOUTree.Text -ne $null)
		{
			add-logs -text 'LOG: Specific OU specified, moving user'
			
			$CanocicalName = $comboboxOUTree.Text
			
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			
			$OUTOMove = ((Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object -FilterScript {
						$_.CanonicalName -eq $CanocicalName
					}).DistinguishedName)
			
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			
			$User | Move-ADObject -TargetPath $OUTOMove
			
			add-logs -text 'LOG: Done'
		}
		else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	
	# If DirSync is enabled
	if ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		if (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			
			try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock {
					Start-ADSyncSyncCycle
				} -ErrorAction Stop
			}
			catch
			{
				add-logs -text "WARN: $_"
				
				$null = (Add-Type -AssemblyName System.Windows.Forms)
				[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			
			add-logs -text 'LOG: Done'
		}
		else
		{
			add-logs -text 'WARN: ADSync Server text box is empty'
			
			$null = (Add-Type -AssemblyName System.Windows.Forms)
			[Windows.Forms.MessageBox]::Show('Please enter an AD Sync server', 'Warning', 'OK', 'Warning')
		}
	}
	# If DirSync is not enabled
	else
	{
		add-logs -text 'LOG: User is not being AD-Synced'
		add-logs -text 'LOG: All required parameters are valid'
		
		#Check to see if the user is being enabled upon creation or disabled
		
		# User is going to be disabled
		add-logs -text 'LOG: Checking enabled status of user'
		
		if ($checkboxBlockCred.Checked -eq $true)
		{
			#If user is going to be disabled
			add-logs -text 'LOG: User is Disabled'
			add-logs -text 'LOG: Creating user'
			
			if (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = 'Warning'
				Show-MessageBox_psf
			}
			else
			{
				if ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object -Process {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
				}
				catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = 'Warning'
					Show-MessageBox_psf
				}
				
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				if ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $group"
						$GroupGuid = ((Get-MsolGroup -All | Where-Object -FilterScript {
									$_.displayname -eq $group
								}).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				if ($Licenses2Add -ne $null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((Get-Date) + $ts).ToString('HH:mm')
					do
					{
						$DateNow = (Get-Date).ToString('HH:mm')
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					until (((Get-Mailbox | Where-Object -FilterScript {
									$_.DisplayName -eq $textboxO365DisplayName.text
								}) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					if ($textboxO365EmailAddress.Text -like '*@*')
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						if ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object -FilterScript {
									$_.DisplayName -eq $textboxO365DisplayName.text
								}
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text 'LOG: Done'
							}
							catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						else
						{
							add-logs -text 'LOG: E-Mail entered is the same as UPN, skipping.'
						}
					}
					else
					{
						add-logs -text 'LOG: No E-Mail entered'
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					if ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object -FilterScript {
							$_.DisplayName -eq $textboxO365DisplayName.text
						}
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{
								add = "$Proxy"
							}
							add-logs -text 'LOG: Done'
						}
					}
					else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					if ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MsolUser | Where-Object -FilterScript {
							$_.Displayname -eq $textboxO365DisplayName.text
						}
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							if ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text 'LOG: Done'
							}
							else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $group -Member $DN"
								try
								{
									Add-DistributionGroupMember -Identity "$group" -Member ($User).DisplayName
								}
								catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					if ($SharedMailboxes -ne $null)
					{
						$User = Get-MsolUser | Where-Object -FilterScript {
							$_.Displayname -eq $textboxO365DisplayName.text
						}
						$DN = ($User).DisplayName
						if ($comboboxsharedmaiboxpermission.SelectedItem -eq 'Full Access')
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								if ($Automap -eq 'False')
								{
									Add-Logs -text 'LOG: AutoMapping set to False'
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								else
								{
									Add-Logs -text 'LOG: AutoMapping set to True'
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						elseif ($comboboxsharedmaiboxpermission.SelectedItem -eq 'Send As')
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$false
								Add-Logs -text 'LOG: Done'
							}
						}
						else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					if ($comboboxO365HidefromGAL.SelectedItem -eq $true)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object -FilterScript {
							$_.DisplayName -eq $textboxO365DisplayName.text
						}
						if ($null -ne $Mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = 'User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoTitle = 'Warning'
							Show-MessageBox_psf
						}
					}
					else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				if ($comboboxMFA.Selecteditem -eq 'True')
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = '*'
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				if ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				else
				{
					Add-Logs -text 'LOG: OWA Enabled'
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				if ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
				}
				
				Add-Logs -text 'LOG: Done'
			}
		}
		else
		{
			#User is going to be enabled upon creation
			add-logs -text 'LOG: User is Enabled'
			add-logs -text 'LOG: Creating user'
			if (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = 'Warning'
				Show-MessageBox_psf
			}
			else
			{
				if ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object -Process {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
				}
				catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = 'Warning'
					Show-MessageBox_psf
				}
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				if ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $group"
						$GroupGuid = ((Get-MsolGroup -All | Where-Object -FilterScript {
									$_.displayname -eq $group
								}).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				if ($Licenses2Add -ne $null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((Get-Date) + $ts).ToString('HH:mm')
					do
					{
						$DateNow = (Get-Date).ToString('HH:mm')
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					until (((Get-Mailbox | Where-Object -FilterScript {
									$_.DisplayName -eq $textboxO365DisplayName.text
								}) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					if ($textboxO365EmailAddress.Text -like '*@*')
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						if ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object -FilterScript {
									$_.DisplayName -eq $textboxO365DisplayName.text
								}
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text 'LOG: Done'
							}
							catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						else
						{
							add-logs -text 'LOG: E-Mail entered is the same as UPN, skipping.'
						}
					}
					else
					{
						add-logs -text 'LOG: No E-Mail entered'
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					if ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object -FilterScript {
							$_.DisplayName -eq $textboxO365DisplayName.text
						}
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{
								add = "$Proxy"
							}
							add-logs -text 'LOG: Done'
						}
					}
					else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					if ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MsolUser | Where-Object -FilterScript {
							$_.Displayname -eq $textboxO365DisplayName.text
						}
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							if ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text 'LOG: Done'
							}
							else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $group -Member $DN"
								try
								{
									Add-DistributionGroupMember -Identity "$group" -Member ($User).DisplayName
								}
								catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					if ($SharedMailboxes -ne $null)
					{
						$User = Get-MsolUser | Where-Object -FilterScript {
							$_.Displayname -eq $textboxO365DisplayName.text
						}
						$DN = ($User).DisplayName
						if ($comboboxsharedmaiboxpermission.SelectedItem -eq 'Full Access')
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								if ($Automap -eq 'False')
								{
									Add-Logs -text 'LOG: AutoMapping set to False'
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								else
								{
									Add-Logs -text 'LOG: AutoMapping set to True'
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						elseif ($comboboxsharedmaiboxpermission.SelectedItem -eq 'Send As')
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$false
								Add-Logs -text 'LOG: Done'
							}
						}
						else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					if ($comboboxO365HidefromGAL.SelectedItem -eq $true)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object -FilterScript {
							$_.DisplayName -eq $textboxO365DisplayName.text
						}
						if ($null -ne $Mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = 'User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoTitle = 'Warning'
							Show-MessageBox_psf
						}
					}
					else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				if ($comboboxMFA.Selecteditem -eq 'True')
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = '*'
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				if ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				else
				{
					Add-Logs -text 'LOG: OWA Enabled'
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				if ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
				}
				
				Add-Logs -text 'LOG: Done'
			}
		}
	}
}

function Update-O365DisplayNameTextBox
{
	$copyuser = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365DisplayName -ErrorAction SilentlyContinue).UserFormatO365DisplayName
		#Create an array that we will use for formatting
		$O365DisplayNameFormatString = @()
		if (($null -eq $config) -or ($config -eq ''))
		{
			$config = '%Firstname% %LastName%'
			$null = Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365DisplayName -Value '%FirstName% %LastName%' -Force
		}
		$config -split '%' | ForEach-Object -Process {
			if ($_ -eq 'FirstName')
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text
			}
			elseif ($_ -eq 'LastName')
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text
			}
			elseif ($_ -like ' ')
			{
				$space = ' '
				$O365DisplayNameFormatString += $space
			}
			elseif (($_ -eq 'UPN') -or ($_ -eq 'UserPrincipalName'))
			{
				$O365DisplayNameFormatString += $textboxUserLogonName.text
			}
			elseif (($_ -eq 'Email') -or ($_ -eq 'E-Mail'))
			{
				$O365DisplayNameFormatString += $textboxO365EmailAddress.text
			}
			elseif ($_ -eq 'FirstLetterFirstName')
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'FirstLetterLastName')
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'UserPrincipalNameDomain')
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			elseif ($_ -eq 'UPNDomain')
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			else
			{
				$O365DisplayNameFormatString += $_
			}
			$textboxO365DisplayName.Text = [String]::Join('', $O365DisplayNameFormatString)
		}
	}
}

function Update-O365EmailTextbox
{
	$copyuser = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365Email -ErrorAction SilentlyContinue).UserFormatO365Email
		if (($null -eq $config) -or ($config -eq ''))
		{
			$config = '%FirstLetterFirstName%%LastName%%UserPrincipalNameDomain%'
			$null = Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365Email -Value $config -Force
		}
		#Create an array that we will use for formatting
		$O365EmailFormatString = @()
		$config -split '%' | ForEach-Object -Process {
			if ($_ -eq 'FirstName')
			{
				$O365EmailFormatString += $textboxO365FirstName.Text
			}
			elseif ($_ -eq 'LastName')
			{
				$O365EmailFormatString += $textboxO365LastName.Text
			}
			elseif ($_ -like ' ')
			{
				$space = ' '
				$O365EmailFormatString += $space
			}
			elseif (($_ -eq 'UPN') -or ($_ -eq 'UserPrincipalName'))
			{
				$O365EmailFormatString += $textboxUserLogonName.text
			}
			elseif ($_ -eq 'FirstLetterFirstName')
			{
				$O365EmailFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'FirstLetterLastName')
			{
				$O365EmailFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'UserPrincipalNameDomain')
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			elseif ($_ -eq 'UPNDomain')
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			else
			{
				$O365EmailFormatString += $_
			}
			$textboxO365EmailAddress.Text = [String]::Join('', $O365EmailFormatString)
		}
	}
}

function Update-O365UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365UserPrincipalName -ErrorAction SilentlyContinue).UserFormatO365UserPrincipalName
		#Create an array that we will use for formatting
		$O365UserPrincipalNameFormatString = @()
		$config -split '%' | ForEach-Object -Process {
			if ($_ -eq 'FirstName')
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text
			}
			elseif ($_ -eq 'LastName')
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text
			}
			elseif ($_ -like ' ')
			{
				$space = ' '
				$O365UserPrincipalNameFormatString += $space
			}
			elseif ($_ -eq 'FirstLetterFirstName')
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			elseif ($_ -eq 'FirstLetterLastName')
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			elseif (($_ -eq 'Email') -or ($_ -eq 'E-Mail'))
			{
				$O365UserPrincipalNameFormatString += $textboxO365EmailAddress.text
			}
			else
			{
				$O365UserPrincipalNameFormatString += $_
			}
			$textboxO365UPN.Text = [String]::Join('', $O365UserPrincipalNameFormatString)
		}
	}
}

#endregion

$MainForm_Load = {
	$imagePath = Join-Path -Path (Get-ScriptDirectory) -ChildPath 'Icon\Main_Icon.ico'
	
	# Show a splash screen before loading
	$splashForm = Show-SplashScreen -ImageLocation $imagePath -Title 'Prepare stuff...' -PassThru
	
	$MFALogin = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	
	if ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}

	$DarkMode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode)
	
	if ($DarkMode -eq 1)
	{
		$null = (Set-DarkMode)
	}
	else
	{
		$null = (Set-LightMode)
	}
}

$MainForm_DuringShow = {
	$splashForm.Text = 'Load ActiveDirectory Module...'
	$null = (Import-Module -Name ActiveDirectory -ErrorAction SilentlyContinue)

	$splashForm.Text = 'Load ADSync Module...'
	$null = (Import-Module -Name ADSync -ErrorAction SilentlyContinue)
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	$splashForm.Text = 'Getting things ready...'
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	$copyOffice365UserToolStripMenuItem.Enabled = $false
	$textboxADSyncServer.Enabled = $false
	$datetimepickerDATE.Refresh()
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	$datetimepickerTIME.Text = '05:00 PM'
	$MainForm.MaximizeBox = $false
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	$comboboxO365HidefromGAL.SelectedIndex = 1
	
	# DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $false
	
	# Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = 'Please connect to Office 365 to assign a license'
	
	# DEBUG
	$tabcontrolUserProperties.Enabled = $false
	$buttonCreateUser.Enabled = $false
	$labelO365Groups.Text = 'To add your user to a Mail Enabled Group, please connect to Office 365'
	$labelsharedmailboxes.text = 'To grant your user permissions on a Shared Mailbox, please connect to Office 365'
	$labelSecurityGroups.Text = 'To add your user to a Security Group, please connect to Office 365'
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	$null = (Update-ComboBox -ComboBox $comboboxO365Domains -Items 'Please connect to Office 365')
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	$comboboxMFA.SelectedIndex = 0
	$CountryCode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode)
	
	if ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = 'US'
	}
	else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = 'False'
	$labelTimeLeft.Text = ''
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	$null = (Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items 'Domain Users')
	$comboboxPrimaryGroup.SelectedItem = 'Domain Users'
	$AlwaysADCreate = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	
	if ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	
	if ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
	
	$comboboxActiveSync.SelectedItem = 'True'
	
	# Optional: Close the splash screen when we are done
	$splashForm.Close()
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		try
		{
			New-MUCUser
		}
		catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	#If only Office 365 user is being created 
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		try
		{
			New-MUCO365User
		}
		catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		try
		{
			New-MUCUser
		}
		catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		try
		{
			New-MUCO365User
		}
		catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	if ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = 'Display Name:'
			$labelDisplayName.ForeColor = 'White'
		}
		elseif ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = '*Display Name:'
			$labelDisplayName.ForeColor = 'LightCoral'
		}
	}
	else
	{
		if ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = 'Display Name:'
			$labelDisplayName.ForeColor = 'Black'
		}
		elseif ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = '*Display Name:'
			$labelDisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	if ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	if ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ''
	}
	else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	if ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	if ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ''
	}
	else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	if ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	if ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ''
	}
	else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	if ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	if ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	else
	{
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object -Property {
				Get-Random
			})[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = 'Confirm Password:'
			$labelConfirmPassword.ForeColor = 'White'
		}
		elseif ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = '*Confirm Password:'
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
	}
	else
	{
		if ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = 'Confirm Password:'
			$labelConfirmPassword.ForeColor = 'Black'
		}
		elseif ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = '*Confirm Password:'
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
	}
	
	
	if (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ''
	}
	else
	{
		if (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			if ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
			else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
		}
		elseif (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			if ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = 'Passwords match!'
			}
			else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = 'Passwords match!'
			}
			
			#Create just an AD User
			if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
		else
		{
			$labelpasswordconfirmmessage.Text = ''
		}
	}
}

$buttonCopyOnPremUser_Click = {
	if ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text 'LOG: Copying AD User attributes to Office 365 user'
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text 'LOG: Copy Finished!'
	}
	else
	{
		add-logs -text 'WARN: No Active Directory User is being created'
		$InfoMessage = 'No Active Directory user is being created, there is nothing to copy'
		$InfoTitle = 'Warning'
		Show-MessageBox_psf
	}
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	if ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		if ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = 'Confirm Password:'
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		else
		{
			$labelO365userconfirmpassword.Text = 'Confirm Password:'
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		if (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	elseif ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		if ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = '*Confirm Password:'
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		else
		{
			$labelO365userconfirmpassword.Text = '*Confirm Password:'
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
	}
	
	if (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ''
	}
	else
	{
		if (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			if ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
			else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
		}
		else
		{
			if ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = 'Passwords match!'
			}
			else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = 'Passwords match!'
			}
			
			#Create just an AD User
			if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	if ($radiobuttonNonMFALogin.Checked -eq $true)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message 'Please enter your Office 365 credentials to connect to Exchange Online and MSOnline'
		add-logs -text 'LOG: Done'
		
		if ($credential -eq $null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = 'No credentials were entered. Please enter valid Office 365 credentials'
			$InfoTitle = 'Warning'
			Show-MessageBox_psf
		}
		else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			
			$imagePath = Join-Path -Path (Get-ScriptDirectory) -ChildPath 'Icon\Main_Icon.ico'
			
			# Show a splash screen before loading
			$splashForm = Show-SplashScreen -ImageLocation $imagePath -Title 'Load MSOnline Module' -PassThru
			Import-Module -Name MSOnline
			
			$splashForm.Text = 'Connect to MSOL...'
			Connect-MsolService -Credential $credential
			
			$splashForm.Text = 'Connect to ExchangeOnline...'
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri 'https://outlook.office365.com/powershell-liveid/' -Authentication 'Basic' -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			
			$splashForm.Text = 'Prepare ExchangeOnline...'
			Import-PSSession -Session $exchangeSession -AllowClobber
			
			$splashForm.Close()
			add-logs -text 'LOG: Done'
		}
	}
	else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		
		# Show a splash screen before loading
		$splashForm = Show-SplashScreen -ImageLocation $imagePath -Title 'Prepare Online connection' -PassThru
		
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + '\Apps\2.0\') -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object -FilterScript {
				$_ -notmatch '_none_'
			} | Select-Object -First 1)
		if ($Modules -eq $null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = 'Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps'
			$InfoTitle = 'Warning'
			Show-MessageBox_psf
		}
		
		foreach ($Module in $Modules)
		{
			$splashForm.Text = 'Loading $Module Modules...'
			Import-Module -Name "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		$splashForm.Text = 'Connecting to MSOnline'
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$splashForm.Text = 'Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		$splashForm.Text = 'Prepare Exchange Online'
		Import-PSSession -Session $EXOSession
		add-logs -text 'LOG: Done'
		$splashForm.Close()
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		$copyOffice365UserToolStripMenuItem.Enabled = $true
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		if ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = 'Connected'
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		else
		{
			$labelconnectionstatus.Text = 'Connected'
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		$labelO365Groups.Text = 'To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox'
		$labelsharedmailboxes.text = 'To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox'
		$labelSecurityGroups.Text = 'Please select any Security Groups you want to add your new user to'
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $false
		$buttonConnectToOffice365.Text = 'Connected to Office 365'
		$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		if ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		if (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object -FilterScript {
				$_.Status -eq 'Verified'
			} | Select-Object -ExpandProperty Name)
		if ($Domains -ne $null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += '@' + $Domain
			}
		}
		else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = 'No verified Domains were found'
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object -FilterScript {
			$_.ActiveUnits -ne $_.ConsumedUnits
		}
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ':' | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			if (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ''
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File -FilePath "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = 'Click to select an Office 365 license'
		
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup -All | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup -All | Where-Object -FilterScript {
				($_.GroupType -eq 'DistributionList') -or ($_.GroupType -eq 'MailEnabledSecurity')
			} | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup -All | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup -All | Where-Object -FilterScript {
				$_.GroupType -eq 'Security'
			} | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = 'Please select any Security Groups you want to add your new user to'
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = 'To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox'
		
		$labelsharedmailboxes.text = 'To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox'
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object -FilterScript {
			$_.RecipientTypeDetails -eq 'SharedMailbox'
		} | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = 'False'
	}
	else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	if ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	else
	{
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object -Property {
				Get-Random
			})[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}
}


$checkboxRunADSync_CheckedChanged = {
	if ($checkboxRunADSync.Checked -eq $true)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = 'This feature is not available for AD-Synced enviornments.'
		
		$textboxADSyncServer.Enabled = $true
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $true
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = 'Please check all groups you want your user to be a member of.'
		
		$textboxADSyncServer.Enabled = $false
	}
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	if ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ''
	}
	else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	if ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	if ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ''
	}
	else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	if ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	if ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + ' ' + $textboxO365LastName.Text
	}
	else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + ' ' + $textboxO365Initials.text + '.' + $textboxO365LastName.Text
	}
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength
	$console.ScrollToCaret()
	$console.Focus()
	
	if ($global:ExternalLog -ne $null)
	{
		$console.Text | Out-File -FilePath $global:ExternalLog
	}
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ''
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ''
}

$checkboxconfigo365user_CheckedChanged = {
	if ($checkboxconfigo365user.CheckState -eq 'checked')
	{
		$tabpageOffice365.Enabled = $true
	}
	else
	{
		$tabpageOffice365.Enabled = $false
	}
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
	if (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		if ($null -ne (Get-Module -ListAvailable -Name 'ADSync'))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $true
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $true
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = 'True'
			add-logs -text 'LOG: Done'
		}
	}
	else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $true
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
	if (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		if ($null -ne (Get-Module -ListAvailable -Name 'ActiveDirectory'))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text 'Enabling Copy AD User Menu Item'
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -ExpandProperty CanonicalName)
			
			if ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = 'Warning'
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			
			$groups = Get-ADGroup -Filter * | Where-Object -FilterScript {
				($_.Name -ne 'Domain Users') -and ($_.Name -ne 'Domain Computers')
			} | Select-Object -ExpandProperty Name | Sort-Object
			
			$Global:OriginalData = $groups
			
			if ($null -eq $groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = 'Warning'
				Show-MessageBox_psf
			}
			else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			if ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = 'Warning'
				Show-MessageBox_psf
				$textboxUPNDomain.Text = 'Not Available'
			}
			else
			{
				$textboxUPNDomain.Text = $Netbiosname + '\'
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			if ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = 'Warning'
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object -Property UPNSuffixes -ExpandProperty UPNSuffixes)
				if ($extraUPNS -ne $null)
				{
					foreach ($extraUPN in $extraUPNS)
					{
						$UPNs += '@' + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += '@' + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = 'Error'
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | & "$env:windir\system32\clip.exe"
	add-logs -text 'LOG: Done'
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ''
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}



$textboxUserLogonName_TextChanged = {
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = 'User logon name: (UPN)'
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		elseif ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = '*User logon name: (UPN)'
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
	}
	else
	{
		if ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = 'User logon name: (UPN)'
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		elseif ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = '*User logon name: (UPN)'
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
	}
	
	
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	if ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = 'Password:'
			$labelPassword.ForeColor = 'White'
		}
		elseif ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = '*Password:'
			$labelPassword.ForeColor = 'LightCoral'
		}
	}
	else
	{
		if ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = 'Password:'
			$labelPassword.ForeColor = 'Black'
		}
		elseif ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = '*Password:'
			$labelPassword.ForeColor = 'Firebrick'
		}
	}
	
	
	if (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ''
	}
	else
	{
		if (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			if ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
			else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
		}
		elseif (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			if ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = 'Passwords match!'
			}
			else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = 'Passwords match!'
			}
			
			#Create just an AD User
			if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
		else
		{
			$labelpasswordconfirmmessage.Text = ''
		}
	}
}



$linklabelBradleyWyatt_LinkClicked = [Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	Start-Process -FilePath 'https://www.linkedin.com/in/bradleywyatt/'
	add-logs -text 'LOG: Done'
}

$linklabelGitHub_LinkClicked = [Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath 'https://github.com/bwya77/AD-Master-User-Creator'
	add-logs -text 'LOG: Done'
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = 'Display Name:'
			$labelO365DisplayName.ForeColor = 'White'
		}
		elseif ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = '*Display Name:'
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	else
	{
		if ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = 'Display Name:'
			$labelO365DisplayName.ForeColor = 'Black'
		}
		elseif ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = '*Display Name:'
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	if ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	if ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		Update-O365EmailTextbox
		if ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = 'UserPrincipalName:'
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		else
		{
			$labelO365UserPrincipalName.Text = 'UserPrincipalName:'
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
	}
	elseif ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		if ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = '*UserPrincipalName:'
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'
		}
		else
		{
			$labelO365UserPrincipalName.Text = '*UserPrincipalName:'
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
	}
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $false
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	if ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = 'Password:'
			$labelO365userpassword.ForeColor = 'White'
		}
		elseif ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = '*Password:'
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	else
	{
		if ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = 'Password:'
			$labelO365userpassword.ForeColor = 'Black'
		}
		elseif ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = '*Password:'
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	if (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ''
	}
	else
	{
		if (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			if ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
			else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = 'Passwords do not match!'
				$buttonCreateUser.Enabled = $false
			}
		}
		else
		{
			if ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = 'Passwords match!'
			}
			else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = 'Passwords match!'
			}

			# Create just an AD User
			if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			# Create AD nad O365 User (w/ ADSync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			# Create AD And O365 User (no Sync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			# Create just an O365 User no adsync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			# Create just an O365 user with ADSync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			else
			{
				$buttonCreateUser.Enabled = $false
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	$DarkMode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode)
	Toogle-LicenseStatus
}

$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode)
	
	if (($comboboxO365countrycode.SelectedItem -eq $null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		if ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = '*Country Code'
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		else
		{
			$labelCountryCode.Text = '*Country Code'
			$labelCountryCode.ForeColor = 'Firebrick'
		}
	}
	else
	{
		if ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = 'Country Code'
			$labelCountryCode.ForeColor = 'White'
		}
		else
		{
			$labelCountryCode.Text = 'Country Code'
			$labelCountryCode.ForeColor = 'Black'
		}
	}
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode)
	
	if ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		
		Get-PSSession | Remove-PSSession
		
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = '*Connect to Office 365'
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		
		Add-Logs -text 'LOG: Done'
		
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = 'Not Connected'
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	else
	{
		$Global:O365_Pre_Req--
		
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		
		Get-PSSession | Remove-PSSession
		
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = '*Connect to Office 365'
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		
		Add-Logs -text 'LOG: Done'
		
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = 'Not Connected'
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
}

$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = (New-Object -TypeName System.Windows.Forms.SaveFileDialog)
	$SaveChooser.title = 'Save Log File'
	$SaveChooser.filter = 'Text File|*.txt'
	$SaveChooser.ShowDialog()
	$null = ($console.Text | Out-File -FilePath $SaveChooser.Filename)
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	if ($comboboxsharedmaiboxpermission.SelectedItem -eq 'Full Access')
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		$null = (Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items 'True', 'False')
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	else
	{
		$null = (Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items '')
		$comboboxsharedmailboxautomap.Enabled = $false
	}
}

$versionToolStripMenuItem_Click = {
	$InfoMessage = "
      Version Number: $Version
      Build Date: $Builddate
      Author: Bradley Wyatt
   "
	$InfoTitle = 'Build Information'
	$null = (Show-MessageBox_psf)
}

$changelogToolStripMenuItem_Click = {
	$null = (Show-ChangeLog_psf)
}

$labelChangelog_Click = {
	$null = (Show-ChangeLog_psf)
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object -TypeName windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = 'Log File Location'
	$SaveFileDialog.filter = 'Log Text File|*.txt'
	$SaveFileDialog.ShowHelp = $true
	$result = $SaveFileDialog.ShowDialog()
	$result
	$global:ExternalLog = $SaveFileDialog.filename
	
	Write-Host -Object $result
	
	if ($result -eq 'Ok')
	{
		$labelLogFile.Text = $global:ExternalLog
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	# Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	# Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
}

$radiobuttonNever_CheckedChanged = {
	# Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	# Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan -Start ((Get-Date -Format 'dddd, MMMM, dd, yyyy') + ' ' + (Get-Date -Format 'HH:mm')) -End (($datetimepickerDATE.Value.ToLongDateString()) + ' ' + $datetimepickerTIME.Value.ToString('HH:mm')))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan -Start ((Get-Date -Format 'dddd, MMMM, dd, yyyy') + ' ' + (Get-Date -Format 'HH:mm')) -End (($datetimepickerDATE.Value.ToLongDateString()) + ' ' + $datetimepickerTIME.Value.ToString('HH:mm')))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
}

$checkedlistboxGroups_SelectedIndexChanged = {
	if ($click -ne 1)
	{
		$CachedCheckedGroups = (Get-Content -Path $CacheGroups -ErrorAction SilentlyContinue)
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object -Process {
			# If checked and not in file, add and append
			$CheckItem = (Get-Content -Path $CacheGroups | Select-String -Pattern $_)
			
			if ($null -eq $CheckItem)
			{
				$null = ($_ | Out-File -FilePath $CacheGroups -Force -Append)
			}
		}
		
		$CachedCheckedGroups = ( Get-Content -Path $CacheGroups -ErrorAction SilentlyContinue)

		# Get all unchecked items
		$UncheckedItems = ($checkedlistboxGroups.Items | Where-Object -FilterScript {
			$checkedlistboxGroups.CheckedItems -notcontains $_
		})
		
		# Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object -Process {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			if ($_.SideIndicator -eq '==')
			{
				# Remove the item that is present on the list but unchecked from the file
				$Info = ($CachedCheckedGroups | Select-String -Pattern $_.InputObject -NotMatch)
				$InfoMessage = $Info
				$null = ($Info | Out-File -FilePath $CacheGroups -Force -ErrorAction SilentlyContinue)
			}
		}
	}

	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += 'Domain Users'
	$null = (Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items)
}

$optionsToolStripMenuItem_Click = {
	$null = (Show-OptionsMenu_psf)
	
	$DarkMode = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode)
	
	if ($DarkMode -eq 1)
	{
		$null = (Set-DarkMode)
	}
	else
	{
		$null = (Set-LightMode)
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription)
	
	if ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxoffice_FocusChanged = {
	$ADOffice = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice)
	
	if ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName)
	
	if ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
}



$textboxStreet_FocusChanged = {
	$ADStreet = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet)
	
	if ($ADStreet -eq 1)
	{
		$words = $textboxStreet.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxStreet.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxcity_FocusChanged = {
	$ADCity = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity)
	
	if ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxstate_FocusChanged = {
	$ADState = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState)
	if ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle)
			
	if ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = ((Get-Culture).TextInfo)
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	
	if ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	if ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxSearchGroups_TextChanged = {
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object -FilterScript {
		$_ -like "*$Filter*"
	}
	
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content -Path $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object -Process {
		if ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
}

$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = ($OriginalDataSecurityGroups | Where-Object -FilterScript {
		$_ -like "*$Filter*"
	})
	$null = (Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results)
	
	Get-Content -Path $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object -Process {
		if ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	$textboxSearchO365SecurityGroups.Focus()
}

$textboxO365MailGroups_TextChanged = {
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object -FilterScript {
		$_ -like "*$Filter*"
	}
	$null = (Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results)
	
	Get-Content -Path $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object -Process {
		if ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	$textboxO365MailGroups.Focus()
}

$textboxO365street_FocusChanged = {
	$O365Street = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	
	if ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365city_FocusChanged = {
	$O365City = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	
	if ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged = {
	$O365State = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	
	if ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxemployeenumber_TextChanged = {
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmployeeID_TextChanged = {
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged = {
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$copyActiveDirectoryUserToolStripMenuItem_Click = {
	# Set value to 1 so we dont have string settings get in the way
	$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force)
	Show-CopyFromUser_psf
	$copyuser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object -FilterScript {
			$_.Name -like $copyuser
		})[0]
	$UserTemplate = (Get-ADUser -identity ($UserJob).ObjectGuid -properties *)
	Copy-ADUserAttributes
	#Set back to 0
	$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force)
	$null = (Get-Job | Remove-Job)
}

$textboxSamAccount_TextChanged = {
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxSamAccount_FocusChanged = {
	Update-DisplayNameTextbox
}

$clearFormToolStripMenuItem_Click = {
	Reset-Form
}

$exitToolStripMenuItem1_Click = {
	$MainForm.close()
}

$copyToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	if ($DarkMode -eq 1)
	{
		Set-DarkMode
	}
	else
	{
		Set-LightMode
	}
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	
	if ($CopyO365User -ne 1)
	{
		if ($click -ne 1)
		{
			$CachedCheckedDistroGroups = (Get-Content -Path $CacheDistroGroupsFile -ErrorAction SilentlyContinue)		
			$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object -Process {
				# If checked and not in file, add and append
				$CheckItem = (Get-Content -Path $CacheDistroGroupsFile | Select-String -Pattern $_)
				
				if ($null -eq $CheckItem)
				{
					$null = ($_ | Out-File -FilePath $CacheDistroGroupsFile -Force -Append)
				}
			}
			
			$CachedCheckedDistroGroups = (Get-Content -Path $CacheDistroGroupsFile -ErrorAction SilentlyContinue)

			# Get all unchecked items
			$UncheckedItems = ($checkedlistboxDISTROo365groups.Items | Where-Object -FilterScript {
				$checkedlistboxDISTROo365groups.CheckedItems -notcontains $_
			})
			
			# Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object -Process {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				if ($_.SideIndicator -eq '==')
				{
					# Remove the item that is present on the list but unchecked from the file
					$Info = ($CachedCheckedDistroGroups | Select-String -Pattern $_.InputObject -NotMatch)
					$InfoMessage = $Info
					$null = ($Info | Out-File -FilePath $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue)
				}
			}
		}
	}
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged = {
	$CopyO365User = ((Get-ItemProperty -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User)
	
	if ($CopyO365User -ne 1)
	{
		if ($click -ne 1)
		{
			$CachedCheckedSecurityGroups = (Get-Content -Path $CacheSecurityGroupsFile -ErrorAction SilentlyContinue)
			
			$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object -Process {
				# If checked and not in file, add and append
				$CheckItem = Get-Content -Path $CacheSecurityGroupsFile | Select-String -Pattern $_
				if ($null -eq $CheckItem)
				{
					$_ | Out-File -FilePath $CacheSecurityGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedSecurityGroups = (Get-Content -Path $CacheSecurityGroupsFile -ErrorAction SilentlyContinue)

			# Get all unchecked items
			$UncheckedItems = ($checkedlistboxO365SecurityGroups.Items | Where-Object -FilterScript {
				$checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_
			})
			
			# Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object -Process {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				if ($_.SideIndicator -eq '==')
				{
					# Remove the item that is present on the list but unchecked from the file
					$Info = ($CachedCheckedSecurityGroups | Select-String -Pattern $_.InputObject -NotMatch)
					$InfoMessage = $Info
					$null = ($Info | Out-File -FilePath $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue)
				}
			}
		}
	}
}

$checkboxUserMustChangePasswo_CheckedChanged = {
	if (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		
		$InfoMessage = 'You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
		$InfoTitle = 'Warning'
		$null = (Show-MessageBox_psf)
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	elseif (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = 'Warning'
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
}

$checkboxUserCannotChangePass_CheckedChanged = {
	if (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = 'Warning'
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
}

$checkboxPasswordNeverExpires_CheckedChanged = {
	if (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		
		$InfoMessage = 'You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user.'
		$InfoTitle = 'Warning'
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	elseif (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = 'Warning'
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
}

$copyOffice365UserToolStripMenuItem_Click = {
	$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force)
	Show-CopyFromO365User_psf
	Copy-O365UserAttributes
	$null = (Get-Item -Path 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force)
}

$MainForm_Closing = [Windows.Forms.FormClosingEventHandler]{
	$null = (Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue)
}

$comboboxO365Domains_SelectedIndexChanged = {
	Update-O365EmailTextbox
}

$comboboxDomains_SelectedIndexChanged = {
	Update-EmailTextbox
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>