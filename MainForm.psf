<File version="3.1">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>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</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
function Toogle-LicenseStatus
{
	if ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
#If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
#If no license is selected for your user, this will remain disabled"
		if (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			if ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			if ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		else
		{
			if ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		if (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			if ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			if ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		else
		{
			if ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	param
	(
		
		[switch]
		$O365
	)
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	if ($O365 -eq $True)
	{
		$word1 = (Get-Random $Dictionary)
		$Num = Get-random -Maximum 99 -Minimum 0
		$WChar = @(
			"!"
			"@"
			"$"
			"%"
			"&"
			"?"
			"#"
		)
		$Wildchar = Get-random $WChar
		
		$Word1 + "-" + $Num + $WildChar
	}
	else
	{
		$word1 = (Get-Random $Dictionary)
		
		$word2 = (Get-Random $Dictionary | Where-Object {
				$_ -ne $word1
			})
		
		$Word3 = (Get-Random $Dictionary | Where-Object {
				($_ -ne $word1) -and ($_ -ne $word2)
			})
		
		$Num = Get-random -Maximum 99 -Minimum 0
		
		$Word1 + "-" + $word2 + "-" + $word3 + $Num
	}
	
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	
	$ADDescriptionReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	if ($ADDescriptionReset -ne 1)
	{
		$textboxDescription.Text = ""
	}
	
	$ADOfficeReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	if ($ADOfficeReset -ne 1)
	{
		$textboxoffice.Text = ""
	}
	
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	
	$ADCityReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	if ($ADCityReset -ne 1)
	{
		$textboxcity.Text = ""
	}
	$ADStateReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	if ($ADStateReset -ne 1)
	{
		$textboxstate.Text = ""
	}
	
	$ADZipReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADZip -ErrorAction SilentlyContinue).ADZip
	if ($ADZipReset -ne 1)
	{
		$textboxzipcode.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	
	$ADDepartmentReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	if ($ADDepartmentReset -ne 1)
	{
		$textboxDepartment.Text = ""
	}
	
	$ADCompanyReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	if ($ADCompanyReset -ne 1)
	{
		$textboxCompany.Text = ""
	}
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	
	$ADLogonScriptReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADLogonScript -ErrorAction SilentlyContinue).ADLogonScript
	if ($ADLogonScriptReset -ne 1)
	{
		$textboxlogonscript.Text = ""
	}
	
	
	
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	$textboxEmployeeID.Text = ""
	$textboxemployeenumber.Text = ""
	$textboxemployeeType.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	if ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""
	
	$O365CityReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	if ($O365CityReset -ne 1)
	{
		$textboxo365city.Text = ""
	}
	
	$O365StateReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	if ($O365StateReset -ne 1)
	{
		$textboxo365state.Text = ""
	}
	
	$O365ZipReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365Zip -ErrorAction SilentlyContinue).O365Zip
	if ($O365ZipReset -ne 1)
	{
		$textboxo365zip.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		if (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		
		$config -split "%" | ForEach-Object {
			if ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			elseif ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			elseif (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			elseif ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			elseif ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			elseif ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			elseif ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			elseif (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			elseif (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			elseif ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			elseif ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			elseif ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			elseif ($_ -eq "UserPrincipalNameDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			elseif ($_ -eq "UPNDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
			
		}
		
		
	}
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		if (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				if ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				elseif ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				elseif (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				elseif ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				elseif ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				elseif ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				elseif ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				elseif (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				elseif (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				elseif ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				elseif ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				elseif ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				elseif ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				elseif ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		if (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				if ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				elseif ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				elseif (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				elseif ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				elseif ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				elseif ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				elseif ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				elseif (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				elseif (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				elseif ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				elseif ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				elseif ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		if (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				if ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				elseif ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				elseif (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				elseif ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				elseif ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				elseif ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				elseif ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				elseif (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				elseif (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				elseif ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				elseif ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				elseif ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				elseif ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				elseif ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelBradleyWyatt.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$groupboxADSync.ForeColor = 'White'
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	if ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	$comboboxOWA.FlatStyle = 'Flat'
	$comboboxOWA.ForeColor = 'White'
	$comboboxOWA.BackColor = "35,35,35"
	
	$comboboxActiveSync.FlatStyle = 'Flat'
	$comboboxActiveSync.ForeColor = 'White'
	$comboboxActiveSync.BackColor = "35,35,35"
	
	
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "WhiteSmoke"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelBradleyWyatt.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	if ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
	
	$comboboxOWA.FlatStyle = 'Standard'
	$comboboxOWA.ForeColor = 'Black'
	$comboboxOWA.BackColor = "Window"
	
	$comboboxActiveSync.FlatStyle = 'Standard'
	$comboboxActiveSync.ForeColor = 'Black'
	$comboboxActiveSync.BackColor = "Window"
	
}

function Copy-ADUserAttributes
{
	Add-Logs -text "LOG: Setting Description"
	$textboxDescription.Text = $UserTemplate.Description
	Add-Logs -text "LOG: Setting Office"
	$textboxoffice.Text = $UserTemplate.Office
	Add-Logs -text "LOG: Setting Office Phone"
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	Add-Logs -text "LOG: Setting Email Address"
	$textboxEmail.Text = $UserTemplate.EmailAddress
	Add-Logs -text "LOG: Setting Home Page"
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	Add-Logs -text "LOG: Changing the OU for the user to $((($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)")))"
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	Add-Logs -text "LOG: Checking Password Never Expires status"
	if ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		Add-Logs -text "LOG: Setting Password Never Expires to True"
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	else
	{
		Add-Logs -text "LOG: Setting Password Never Expires to False"
		$checkboxPasswordNeverExpires.CheckState = 'UnChecked'
	}
	
	Add-Logs -text "LOG: Checking Password Change Ability"
	if ($UserTemplate.CannotChangePassword -eq $True)
	{
		Add-Logs -text "LOG: Setting User Cannot Change Password to True"
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	else
	{
		Add-Logs -text "LOG: Setting User Cannot Change Password to False"
		$checkboxUserCannotChangePass.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text "LOG: Checking Password Change statue"
	if ($UserTemplate.PasswordExpired -eq $True)
	{
		Add-Logs -text "LOG: Setting User Must Change Password to True"
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	else
	{
		Add-Logs -text "LOG: Setting User Must Change Password to False"
		$checkboxUserMustChangePasswo.CheckState -eq 'UnChecked'
	}
	Add-Logs -text "LOG: Setting Street Address"
	$textboxStreet.Text = $UserTemplate.StreetAddress
	Add-Logs -text "LOG: Setting PO Box"
	$textboxPOBox.Text = $UserTemplate.POBox
	Add-Logs -text "LOG: Setting City"
	$textboxcity.Text = $UserTemplate.City
	Add-Logs -text "LOG: Setting State"
	$textboxstate.Text = $UserTemplate.State
	Add-Logs -text "LOG: Setting Postal Code"
	$textboxzipcode.Text = $UserTemplate.PostalCode
	Add-Logs -text "LOG: Checking Group Memberships"
	$checkedlistboxGroups.CheckedItems = $null
	$CacheGroups = "$env:TEMP\MUCCacheGroups.txt"
	$click = 1
	($UserTemplate).MemberOf | ForEach-Object {
		$GName = (Get-ADGroup $_).name
		Add-Logs -text "LOG: Adding User to the Group: $GName"
		
		$GName | Out-File $CacheGroups -Append -Force -ErrorAction SilentlyContinue
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	$click = 0
	Add-Logs -text "LOG: Setting Job Title"
	$textboxjobtitle.text = $UserTemplate.Title
	Add-Logs -text "LOG: Setting Department"
	$textboxDepartment.Text = $UserTemplate.Department
	Add-Logs -text "LOG: Setting Company"
	$textboxCompany.Text = $UserTemplate.Company
	Add-Logs -text "LOG: Setting Profile Path"
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	Add-Logs -text "LOG: Setting Script Path"
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	Add-Logs -text "LOG: Setting Home Drive"
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	Add-Logs -text "LOG: Setting Home Directory"
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	Add-Logs -text "LOG: Setting Employee Type"
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	Add-Logs -text "LOG: Done"
	
	
}

function Copy-O365UserAttributes
{
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	
	if ($Licenses2Add.count -gt 0)
	{
		$Global:Licenses2Add = New-Object 'System.Collections.Generic.List[System.Object]'
	}
	
	$CopyUser = $CopyFromO365User_comboboxcopyuser
	add-logs -text "LOG: Copying attributes from $CopyUser"
	
	$UserObj = (Get-Msoluser -All | Where-Object {
			$_.DisplayName -eq $CopyUser
		}) | Select-Object -First 1
	
	add-logs -text "LOG: Getting the UPN Domain of $CopyUser"
	$UPNDomain = ($UserObj.userprincipalname).split('@') | Select-Object -Last 1
	add-logs -text "LOG: Setting the UPN Domain to $UPNDomain"
	$comboboxO365Domains.SelectedItem = "@" + $UPNDomain
	
	add-logs -text "LOG: Copying Country Code"
	$comboboxO365countrycode.SelectedText = ($UserObj).CountryCode
	add-logs -text "LOG: Checking MFA status of $CopyUser"
	if ($null -eq $UserObj.StrongAuthenticationRequirements.State)
	{
		add-logs -text "LOG: Setting MFA to False"
		$comboboxMFA.SelectedItem = "False"
	}
	else
	{
		add-logs -text "LOG: Setting MFA to True"
		$comboboxMFA.SelectedItem = "True"
	}
	add-logs -text "LOG: Copying City"
	$textboxo365city.Text = ($UserObj).city
	add-logs -text "LOG: Copying State"
	$textboxo365state.Text = ($UserObj).state
	add-logs -text "LOG: Copying Street Address"
	$textboxO365street.Text = ($UserObj).streetaddress
	add-logs -text "LOG: Copying Postal Code"
	$textboxo365zip.Text = ($UserObj).postalcode
	
	if (($UserObj).PasswordNeverExpires -eq $true)
	{
		add-logs -text "LOG: Copying Password Never Expires Flag"
		$checkboxO365PasswordNeverExpires.CheckState = 'Checked'
	}
	
	if (($UserObj).BlockCredential -eq $True)
	{
		add-logs -text "LOG: Copying Disabled Account State"
		$checkboxBlockCred.CheckState = 'Checked'
	}
	
	
	
	add-logs -text "LOG: Getting all licenses assinged to $CopyUser"
	$currentlicenses = ($UserObj).Licenses.accountskuid
	foreach ($currentlicense in $currentlicenses)
	{
		$TenantSku = Get-MSOLAccountSku | Where-Object {
			$_.AccountSkuID -match $currentlicense
		}
		
		if ($TenantSku.ActiveUnits -ne $TenantSku.ConsumedUnits)
		{
			$lic = $currentlicense -split ":" | Select-Object -Last 1
			#lookup skus in hashtable and convert to friendly name
			$FriendlyName = $Sku.Item("$Lic")
			if ($null -eq $FriendlyName)
			{
				add-logs -text "LOG: Copying The License: $_"
				$obj = [PSCustomObject]@{
					'Name' = $lic
				}
				$Licenses2Add.Add($obj)
			}
			else
			{
				add-logs -text "LOG: Copying The License: $FriendlyName"
				$obj = [PSCustomObject]@{
					'Name' = $FriendlyName
				}
				
				$Licenses2Add.Add($obj)
				
			}
		}
	}
	
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	Toogle-LicenseStatus
	
	add-logs -text "LOG: Checking Mail Group Membership for $CopyUser"
	Get-MsolGroup -All | Where-Object {
		($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity")
	} | ForEach-Object {
		if (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object {
				$_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:")
			})
		{
			if ($checkedlistboxDISTROo365groups.Items -contains $_.DisplayName)
			{
				$_.DisplayName | Out-File $CacheDistroGroupsFile -Append -Force -ErrorAction SilentlyContinue
				add-logs -text "LOG: Adding User to the Distribution Group: $($_.DisplayName)"
				$checkedlistboxDISTROo365groups.SelectedItem = $($_.DisplayName)
				$index = $checkedlistboxDISTROo365groups.SelectedIndex
				$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
			}
		}
		
		
	}
	Add-Logs -text "LOG: Getting all Security Groups $CopyUser is a Member of"
	Get-MsolGroup -All | Where-Object {
		$_.GroupType -eq "Security"
	} | ForEach-Object {
		if (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object {
				$_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:")
			})
		{
			if ($checkedlistboxO365SecurityGroups.Items -contains $_.DisplayName)
			{
				$_.DisplayName | Out-File $CacheSecurityGroupsFile -Append -Force -ErrorAction SilentlyContinue
				add-logs -text "LOG: Adding User to the Security Group: $($_.DisplayName)"
				$checkedlistboxO365SecurityGroups.SelectedItem = $($_.DisplayName)
				$index = $checkedlistboxO365SecurityGroups.SelectedIndex
				$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
			}
		}
		
		
	}
	
	
	
	$UserObjMailbox = Get-Mailbox (($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:"))
	Add-Logs -text "LOG: Gettings GAL status for User"
	if ($UserObjMailbox.HiddenFromAddressListsEnabled -eq $true)
	{
		Add-Logs -text "LOG: Hiding User from GAL: True"
		$comboboxO365HidefromGAL.SelectedItem = "True"
	}
	else
	{
		Add-Logs -text "LOG: Hiding User from GAL: False"
		$comboboxO365HidefromGAL.SelectedItem = "False"
	}
	
	Add-Logs -text "LOG: Getting Outlook on the Web (OWA) Status for user"
	if (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).OWAEnabled) -eq $True)
	{
		Add-Logs -text "LOG: Outlook on the Web (OWA): True"
		$comboboxOWA.SelectedItem = "True"
	}
	else
	{
		Add-Logs -text "LOG: Outlook on the Web (OWA): False"
		$comboboxOWA.SelectedItem = "False"
	}
	
	Add-Logs -text "LOG: Getting ActiveSync Status for user"
	if (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).ActiveSync) -eq $True)
	{
		Add-Logs -text "LOG: ActiveSync: True"
		$comboboxActiveSync.SelectedItem = "True"
	}
	else
	{
		Add-Logs -text "LOG: ActiveSync: False"
		$comboboxActiveSync.SelectedItem = "False"
	}
	
	add-logs -text "LOG: Done"
	
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

function License-MUCO365User
{
	$licenseforuser = @()
	#$Lookup = @()
	Add-Logs -text "LOG: Getting License selected for user"
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text "LOG: Getting AccountSKU Domain"
	$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
	foreach ($License in $licenses)
	{
		Add-Logs -text "LOG: Looking up SKU for license"
		$Lookup = $Sku.keys | Where-Object {
			$Sku["$_"] -eq "$license"
		}
		Add-Logs "LOG: License lookup is $Lookup"
		if ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text "LOG: No SKU found during lookup"
			$BackSKU = "$LicenseDomain$License"
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			$CheckSku = Get-MSOLAccountSku | Where-Object {
				$_.AccountSKuID -like "*$BackSKU*"
			} | Select-Object -ExpandProperty AccountSkuID
			if ($CheckSku -ne $Null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				$licenseforuser += $CheckSku
			}
			else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		
		else
		{
			Add-Logs -text "LOG: Found the SKU for the license"
			$Lookup | ForEach-Object {
				Add-Logs -text "LOG: Checking License $_"
				$BackSKU = "$LicenseDomain$_"
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				$CheckSku = Get-MSOLAccountSku | Where-Object {
					$_.AccountSKuID -like "*$BackSKU*"
				} | Select-Object -ExpandProperty AccountSkuID
				if ($CheckSku -ne $Null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		$licenseforuser | Out-File "$env:TEMP\MUClicenseforuser.txt" -Force
		
	}
}

function New-MUCUser
{
	
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	#Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	#If account should be disabled
	if ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object {
			($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)))
		}
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		if ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		if ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{
					proxyAddresses = $Proxy
				}
			}
		}
		else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		if ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{
				EmployeeType = $textboxemployeeType.text
			}
		}
		else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		if ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text
		}
		else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		if ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		if ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		if ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{
				primarygroupid = $group.primaryGroupToken
			}
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		if ($comboboxOUTree.Text -ne $Null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.text
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object {
					$_.CanonicalName -eq $CanocicalName
				}).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text
		}
		catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object {
			($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)))
		}
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		if ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		if ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{
					proxyAddresses = $Proxy
				}
			}
		}
		else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		if ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{
				EmployeeType = $textboxemployeeType.text
			}
		}
		else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		if ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text
		}
		else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		if ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		if ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		if ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{
				primarygroupid = $group.primaryGroupToken
			}
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		if ($comboboxOUTree.Text -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.Text
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object {
					$_.CanonicalName -eq $CanocicalName
				}).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	#If DirSync is enabled
	if ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		if (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock {
					Start-ADSyncSyncCycle
				} -ErrorAction Stop
			}
			catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			add-logs -text 'LOG: Done'
		}
		else
		{
			add-logs -text "WARN: ADSync Server text box is empty"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
		}
	}
	#If DirSync is not enabled
	else
	{
		add-logs -text "LOG: User is not being AD-Synced"
		
		add-logs -text 'LOG: All required parameters are valid'
		
		#Check to see if the user is being enabled upon creation or disabled
		
		#User is going to be disabled
		add-logs -text 'LOG: Checking enabled status of user'
		if ($checkboxBlockCred.Checked -eq $true)
		{
			#If user is going to be disabled
			add-logs -text 'LOG: User is Disabled'
			add-logs -text 'LOG: Creating user'
			if (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			else
			{
				if ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
					
				}
				catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				if ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object {
									$_.displayname -eq $Group
								}).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				if ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					until (((Get-Mailbox | Where-Object {
									$_.DisplayName -eq $textboxO365DisplayName.text
								}) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					if ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						if ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object {
									$_.DisplayName -eq $textboxO365DisplayName.text
								}
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					if ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object {
							$_.DisplayName -eq $textboxO365DisplayName.text
						}
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{
								add = "$Proxy"
							}
							add-logs -text 'LOG: Done'
						}
					}
					else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					if ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object {
							$_.Displayname -eq $textboxO365DisplayName.text
						}
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							if ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					if ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object {
							$_.Displayname -eq $textboxO365DisplayName.text
						}
						$DN = ($User).DisplayName
						if ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								if ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						elseif ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					if ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object {
							$_.DisplayName -eq $textboxO365DisplayName.text
						}
						if ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				if ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				if ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				if ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
				
			}
		}
		else
		{
			#User is going to be enabled upon creation
			add-logs -text 'LOG: User is Enabled'
			add-logs -text 'LOG: Creating user'
			if (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			else
			{
				if ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
				}
				catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				if ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object {
									$_.displayname -eq $Group
								}).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				if ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					until (((Get-Mailbox | Where-Object {
									$_.DisplayName -eq $textboxO365DisplayName.text
								}) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					if ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						if ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object {
									$_.DisplayName -eq $textboxO365DisplayName.text
								}
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					if ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object {
							$_.DisplayName -eq $textboxO365DisplayName.text
						}
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{
								add = "$Proxy"
							}
							add-logs -text 'LOG: Done'
						}
					}
					else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					if ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object {
							$_.Displayname -eq $textboxO365DisplayName.text
						}
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							if ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					if ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object {
							$_.Displayname -eq $textboxO365DisplayName.text
						}
						$DN = ($User).DisplayName
						if ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								if ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						elseif ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					if ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object {
							$_.DisplayName -eq $textboxO365DisplayName.text
						}
						if ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				if ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				if ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				if ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
			}
		}
	}
}

function Update-O365DisplayNameTextBox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365DisplayName -ErrorAction SilentlyContinue).UserFormatO365DisplayName
		#Create an array that we will use for formatting
		$O365DisplayNameFormatString = @()
		if (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365DisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		$config -split "%" | ForEach-Object {
			if ($_ -eq "FirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text
			}
			elseif ($_ -eq "LastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text
			}
			elseif ($_ -like " ")
			{
				$space = " "
				$O365DisplayNameFormatString += $space
			}
			elseif (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365DisplayNameFormatString += $textboxUserLogonName.text
			}
			elseif (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365DisplayNameFormatString += $textboxO365EmailAddress.text
			}
			elseif ($_ -eq "FirstLetterFirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			elseif ($_ -eq "FirstLetterLastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			elseif ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			elseif ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			else
			{
				$O365DisplayNameFormatString += $_
			}
			$textboxO365DisplayName.Text = [String]::Join('', $O365DisplayNameFormatString)
		}
		
	}
}

function Update-O365EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365Email -ErrorAction SilentlyContinue).UserFormatO365Email
		if (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%FirstLetterFirstName%%LastName%%UserPrincipalNameDomain%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365Email -Value $config -Force | Out-Null
		}
		#Create an array that we will use for formatting
		$O365EmailFormatString = @()
		$config -split "%" | ForEach-Object {
			if ($_ -eq "FirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text
			}
			elseif ($_ -eq "LastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text
			}
			elseif ($_ -like " ")
			{
				$space = " "
				$O365EmailFormatString += $space
			}
			elseif (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365EmailFormatString += $textboxUserLogonName.text
			}
			elseif ($_ -eq "FirstLetterFirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			elseif ($_ -eq "FirstLetterLastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			elseif ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			elseif ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			else
			{
				$O365EmailFormatString += $_
			}
			$textboxO365EmailAddress.Text = [String]::Join('', $O365EmailFormatString)
		}
		
	}
}

function Update-O365UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	if ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365UserPrincipalName -ErrorAction SilentlyContinue).UserFormatO365UserPrincipalName
		#Create an array that we will use for formatting
		$O365UserPrincipalNameFormatString = @()
		$config -split "%" | ForEach-Object {
			if ($_ -eq "FirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text
			}
			elseif ($_ -eq "LastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text
			}
			elseif ($_ -like " ")
			{
				$space = " "
				$O365UserPrincipalNameFormatString += $space
			}
			elseif ($_ -eq "FirstLetterFirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			elseif ($_ -eq "FirstLetterLastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			elseif (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365UserPrincipalNameFormatString += $textboxO365EmailAddress.text
			}
			else
			{
				$O365UserPrincipalNameFormatString += $_
			}
			$textboxO365UPN.Text = [String]::Join('', $O365UserPrincipalNameFormatString)
		}
		
	}
}

#endregion

$MainForm_Load = {
	
	
	
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	if ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	
	
	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	$copyOffice365UserToolStripMenuItem.Enabled = $false
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $false
	
	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	if ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	if ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	if ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
	
	$comboboxActiveSync.SelectedItem = "True"
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	if (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		try
		{
			New-MUCUser
		}
		catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	#If only Office 365 user is being created 
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
		try
		{
			New-MUCO365User
		}
		catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		try
		{
			New-MUCUser
		}
		catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Only an Office 365 User is being created'
		try
		{
			New-MUCO365User
		}
		catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	if ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
		}
		elseif ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
		}
		
	}
	else
	{
		if ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
		}
		elseif ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	if ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	if ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	if ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	if ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
	
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	if ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	if ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	if ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	if ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object {
				Get-Random
			})[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		elseif ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	else
	{
		if ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		elseif ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	if (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	else
	{
		if (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			if ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		elseif (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			if ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	if ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	if ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		if ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		if (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	elseif ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		if ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	if (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	else
	{
		if (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			if ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		else
		{
			if ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	if ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		if ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{
				$_ -notmatch "_none_"
			} | Select-Object -First 1)
		if ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		$copyOffice365UserToolStripMenuItem.Enabled = $true
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		if ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		if ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		if (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object {
				$_.Status -eq 'Verified'
			} | Select-Object -ExpandProperty Name)
		if ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object {
			$_.ActiveUnits -ne $_.ConsumedUnits
		}
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			if (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ""
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = "Click to select an Office 365 license"
		
		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup -All | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup -All | Where-Object {
				($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity")
			} | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup -All | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup -All | Where-Object {
				$_.GroupType -eq "Security"
			} | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object {
			$_.RecipientTypeDetails -eq "SharedMailbox"
		} | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	if ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object {
				Get-Random
			})[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}
	
	
	
}


$checkboxRunADSync_CheckedChanged = {
	if ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	if ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	if ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	if ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	if ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	if ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	if ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	if ($checkboxconfigo365user.CheckState -eq 'checked')
	{
		$tabpageOffice365.Enabled = $true
	}
	else
	{
		$tabpageOffice365.Enabled = $false
		
	}
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $False
	}
	if (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		if ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = "True"
			add-logs -text 'LOG: Done'
		}
	}
	else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	
	
	
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $False
	}
	if (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		if ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text "Enabling Copy AD User Menu Item"
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			if ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object {
				($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")
			} | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			if ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			if ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			if ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				if ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		elseif ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	else
	{
		if ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		elseif ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	if ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		elseif ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	else
	{
		if ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		elseif ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	if (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	else
	{
		if (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			if ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		elseif (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			if ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelBradleyWyatt_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to author site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"'
	start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	add-logs -text 'LOG: Done'
	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		elseif ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	else
	{
		if ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		elseif ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	if ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	if ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		Update-O365EmailTextbox
		if ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	elseif ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		if ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'
		}
		else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	if ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		if ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		elseif ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	else
	{
		if ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		elseif ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	if (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	else
	{
		
		if (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			if ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		else
		{
			if ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			if (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			elseif (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	Toogle-LicenseStatus
}





$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	if (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		if ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	else
	{
		if ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	if ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Author: Bradley Wyatt
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf
	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
	
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
	
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	if ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan -Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) -End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan -Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) -End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {
	
	if ($click -ne 1)
	{
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheGroups | Select-String $_
			if ($null -eq $CheckItem)
			{
				$_ | Out-File $CacheGroups -Force -Append
			}
		}
		
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxGroups.Items | Where-Object {
			$checkedlistboxGroups.CheckedItems -notcontains $_
		}
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			if ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheGroups -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
	
}





$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	if ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	if ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	if ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	if ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	if ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	if ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	if ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	if ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	if ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSearchGroups_TextChanged = {
	
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object {
		$_ -like "*$filter*"
	}
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object {
		if ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
	
}


$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	
	
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object {
		$_ -like "*$filter*"
	}
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
	Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		if ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchO365SecurityGroups.Focus()
	
}

$textboxO365MailGroups_TextChanged = {
	
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object {
		$_ -like "*$filter*"
	}
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
	Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		if ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxO365MailGroups.Focus()
	
	
	
	
}

$textboxO365street_FocusChanged = {
	$O365Street = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	if ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged = {
	$O365City = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	if ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged = {
	$O365State = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	if ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged = {
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged = {
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged = {
	
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click = {
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	Show-CopyFromUser_psf
	$CopyUser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object {
			$_.Name -like $CopyUser
		})[0]
	$UserTemplate = Get-ADUser -identity ($UserJob).ObjectGuid -properties *
	Copy-ADUserAttributes
	#Set back to 0
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Get-Job | Remove-Job
	
}

$textboxSamAccount_TextChanged = {
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click = {
	Reset-Form
	
}


$exitToolStripMenuItem1_Click = {
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	if ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	else
	{
		Set-LightMode
		
	}
	
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	if ($CopyO365User -ne 1)
	{
		if ($click -ne 1)
		{
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheDistroGroupsFile | Select-String $_
				if ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheDistroGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxDISTROo365groups.Items | Where-Object {
				$checkedlistboxDISTROo365groups.CheckedItems -notcontains $_
			}
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				if ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedDistroGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	if ($CopyO365User -ne 1)
	{
		if ($click -ne 1)
		{
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheSecurityGroupsFile | Select-String $_
				if ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheSecurityGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxO365SecurityGroups.Items | Where-Object {
				$checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_
			}
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				if ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedSecurityGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkboxUserMustChangePasswo_CheckedChanged = {
	if (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	elseif (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}

$checkboxUserCannotChangePass_CheckedChanged = {
	if (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
		
	}
	
	
}

$checkboxPasswordNeverExpires_CheckedChanged = {
	if (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	elseif (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}


$copyOffice365UserToolStripMenuItem_Click = {
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	Show-CopyFromO365User_psf
	Copy-O365UserAttributes
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

$MainForm_Closing = [System.Windows.Forms.FormClosingEventHandler]{
	Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue
	
}



$comboboxO365Domains_SelectedIndexChanged = {
	Update-O365EmailTextbox
}


$comboboxDomains_SelectedIndexChanged = {
	Update-EmailTextbox
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>